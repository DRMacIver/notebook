<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://notebook.drmaciver.com/</id>
  <title>DRMacIver's notebook</title>
  <updated>2025-03-05T11:53:31+00:00</updated>
  <author>
    <name>David R. MacIver</name>
    <email>david@drmaciver.com</email>
  </author>
  <link href="https://notebook.drmaciver.com" rel="alternate"/>
  <link href="https://notebook.drmaciver.com/feed.xml" rel="self"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-02-07-07:44.html</id>
    <title>The obligation to be who you are</title>
    <updated>2024-02-07T09:40:30+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;The obligation to be who you are&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-02-07&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;This post is extremely in the weeds. If you don’t care about moral
philosophy, it’s possibly not for you, though I do think the claim I am
making has important practical implications beyond the theoretical
argument. Also I ran out of steam towards the end.&lt;/p&gt;


&lt;p&gt;Anyway, the following footnote to &lt;a href="https://notebook.drmaciver.com/posts/2024-02-06-10:51.html"&gt;yesterday’s
post about responsibility&lt;/a&gt; sparked some discussion about moral
relativism.&lt;/p&gt;


&lt;p&gt;I’d like to stake out a particular position. First, I’m going to need
to stake out some idiosyncratic terminology.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Possibly many of these have existing terms in the
philosophical literature, or the terms I’m using mean something subtly
different in the literature, but I’m a programmer so I haven’t done the
reading and have to rewrite things in my own terms to understand them.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;First, let’s sketch out what I mean by an &lt;strong&gt;moral
framework&lt;/strong&gt;. I’m not going to define this precisely, but I mean
something like a coherent body of theory and practice that lets you do
things like make judgements about “good” and “bad” and in particular to
make “should” claims, especially about behaviour. Ethical frameworks let
you make judgements about specific questions, and also have a body of
principles and practices for making arguments about moral claims.&lt;/p&gt;


&lt;p&gt;The boundaries of specific moral frameworks are fuzzy, and it can be
hard to point and say that two things you might think of as moral
frameworks definitively are the same, but it’s often easy to point out
that they’re definitely not the same by finding subjects on which they
disagree. e.g. someone operating in an moral framework that embraces
vegetarianism will disagree with someone who is non-vegetarian’s moral
framework around wether eating meat is bad.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Moral realism&lt;/strong&gt; is the position that there is one&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Up to isomorphism.&lt;/span&gt; correct moral framework and all
others are good to the degree they approximate that framework.&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that this doesn’t require making a claim that a
particular moral framework is the objectively correct one, or even that
the objectively correct one is in principle fully discoverable.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Moral relativism&lt;/strong&gt; is the position that there are at
least two moral frameworks that disagree on crucial details and that you
cannot decide between in a non-arbitrary way.&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that, at least how I use it, moral relativism is
compatible with the claim that some moral frameworks are objectively
better than other moral frameworks. It doesn’t require that you can’t
decide between &lt;em&gt;any&lt;/em&gt; two moral frameworks in a non-arbitrary way,
only that there are genuine degrees of freedom in how you adopt an moral
framework.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;I’d like to then subdivide these further:&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt; realism/relativism is the set of claims of
realism and relativism respectively as regards to whether the moral
framework is theoretically defensible. i.e. it’s a claim about which one
is in some sense “objectively correct”.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Practical&lt;/strong&gt; realism/relativism is about how you orient
to other people operating in other moral frameworks than your own, and
whether you treat their moral frameworks as valid for them. This is more
a matter of degrees than the theoretical version is I think (or at
least, certainly is a matter of degrees, and if the theoretical one is
then it’s not obvious to me).&lt;/p&gt;


&lt;p&gt;I think it’s clear that everyone operates on some minimal degree of
practical realism, in that people disagree about ethics without needing
to constantly argue about it, and it’s quite important that in a
multicultural society people be allowed to do this.&lt;label class="margin-toggle sidenote-number" for="fn5"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn5" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Even if you think multiculturalism is bad, you still
have to deal with the fact that other cultures exist and you have to
interact with them. I will grant that someone who is a total cultural
isolationist may not be operating on any degree of practical relativism,
but that would be one of those moral frameworks that I do think is
objectively worse than others.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;But I’d like to argue for the compatibility of a particular moral
claim that demonstrates the compatibility of strong forms of abstract
realism with practical relativism, based on the following claim: Given
two people, let’s call them Alex and Charlie, who agree on a shared
moral framework (which I’ll make certain implicit basic assumptions
about not being too alien from my own) as the “universally correct” one,
it is possible (and indeed likely, although I won’t argue for this too
strongly), for Alex and Charlie to want to adopt more specific moral
frameworks for their behaviour that make stronger claims than their
shared framework, and each of which make moral claims that are
incompatible with the other’s.&lt;/p&gt;


&lt;p&gt;In this view, even if Alex and Charlie are both abstract moral
realists and think that their shared moral framework is objectively
correct, they become practical moral relativists of a particularly
strong form: Each has their own “moral truths” that do not apply to the
other, and they consider both binding for themselves and non-binding for
the other, without thinking the other is wrong for holding their own
moral framework.&lt;/p&gt;


&lt;p&gt;First, let’s consider two categories of example where Alex and
Charlie make different moral judgements about their own behaviour that
are &lt;em&gt;not&lt;/em&gt; examples of relativism, but will point us in the right
direction:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;Should I kiss this attractive person who is enthusiastically hitting
on me (and who satisfies all relevant criteria such as being e.g. above
the age of consent, unrelated to me, uncommitted to anyone else,
etc)?&lt;/li&gt;
&lt;li&gt;Should I build a bridge that I’ve been asked to build as part of my
job?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The first hinges on a particular person-centric question: Do I have
any obligations not to do that? e.g. am I in a committed monogamous
relationship with someone else?&lt;/p&gt;


&lt;p&gt;This isn’t moral relativism in that the actual moral principle being
adopted is something like “If you do not have any obligations that are
not committing you to not do so, go for it buddy”. What differs is not
the moral framework but the individual’s specific obligations.&lt;/p&gt;


&lt;p&gt;Note that this already gets you quite far towards relativism. If
e.g. you profess to be a devout Christian, this creates a significant
set of obligations to behave as a devout Christian, even if those moral
commitments are not ones that you would have in generality.&lt;label class="margin-toggle sidenote-number" for="fn6"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn6" type="checkbox"/&gt;&lt;span class="sidenote"&gt;For a sufficienly Christianity-incompatible objective
morality you might of course have an obligation not to be a devout
Christian. No comment here on whether that’s the case, just highlighting
the conditional.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;The second depends a lot on whether you’re good at building bridges
or not. If you are, and it’s your job (and you’re not in some outlandish
situation where the existence of the bridge itself would be immoral),
then yeah you probably should. If on the other hand you have no
bridge-building related skills, you should signal strongly that this is
not your thing and no you will not build a bridge because it falls
down.&lt;/p&gt;


&lt;p&gt;Again, similarly to the above, there is no actual conflict here. I
think you can quite straightforwardly make a moral principle of “don’t
do things you don’t have the skills to do, especially if peoples’ safety
is on the line” which both Alex and Charlie agree on and that just
happens to cash out differently depending on their respective
skills.&lt;/p&gt;


&lt;p&gt;Both of these point to a sort of “scoped moral framework” of a type
that I think should be perfectly uncontroversial even for the most
adamant of moral realists (though they might object to labelling it a
“moral framework”): The moral framework you get when you take your
broader moral framework and specialise it down to specific
characteristics of the person in question. The body of judgements etc of
what’s good and bad for someone who is a monogamous artist, or a poly
engineer, or…&lt;/p&gt;


&lt;p&gt;These scoped moral frameworks are, from a logically omniscient point
of view, just a subset of the broader moral framework. You just delete
the bits that don’t apply to you, and your behaviour will be perfectly
in line with the broader moral framework because all the bits that could
apply to you are the same as the broader framework’s judgements.&lt;/p&gt;


&lt;p&gt;But we’re not logically omniscient. We’re finite beings. And as a
result when you cut down your moral framework more of it comes into
focus and you get to see how more of the parts of it interact. If you
regularly have interactions of a particular type, even if you derive
those interactions from first principles in your broader moral
framework, you’ll get better at that particular action and subsequently
others like it, and this will clarify some of your obligations…&lt;/p&gt;


&lt;p&gt;Here’s a trivial example: When you leave the pub, do you take your
empty glasses back to the bar?&lt;/p&gt;


&lt;p&gt;If you’ve worked bar, or you know other people who have, you are
probably aware that this makes their lives much easier, especially if
the pub is busy right now. Having the relevant life experience makes you
aware of this, but the facts of the matter are derivable from perfectly
general principles, you just haven’t noticed.&lt;label class="margin-toggle sidenote-number" for="fn7"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn7" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Or possibly have a genuine disagreement about your
obligations in this space! But even without this genuine disagreement
you can have a different awareness of obligations.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;Here’s another similar example that went by recently:&lt;/p&gt;


&lt;p&gt;&lt;a href="https://twitter.com/Kirsten3531/status/1755148835083411515"&gt;&lt;img src="/images/baby-plate.png"/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;I think this is perfectly obvious if you have the relevant life
experiences, and does not require those relevant life experiences to act
on, but is easy to miss.&lt;/p&gt;


&lt;p&gt;Everyone is going to have their own collection of these little moral
duties&lt;label class="margin-toggle sidenote-number" for="fn8"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn8" type="checkbox"/&gt;&lt;span class="sidenote"&gt;If you don’t like the word duty here, me neither. Feel
free to pick some other word. I don’t have a good word that means “like
a duty but not really fully obligatory, just good to do” and while I
like &lt;a href="https://en.wikipedia.org/wiki/Ahkam"&gt;the Islamic
labels&lt;/a&gt; I don’t know how to idiomatically apply them here.&lt;/span&gt; that they adhere to. Even when they
are all derivable in principle from their shared understanding of what
leads to a moral duty, you’ll only have the ones you happen to have
learned, and the specific set will be idiosyncratic to you.&lt;/p&gt;


&lt;p&gt;More, it’s not even totally clear that these should all “port
upwards” to be general norms, because of our finiteness. I think it’s
pretty plausible that the collective set of these little moral duties is
too large for any one person to keep in their head and reliably
implement without exhausting themselves, and that we’re better served by
a degree of heterogeneity where different people keep track of different
ones. I think it would be far too happy a coincidence for the exact
distribution that occurs to be the morally optimal one, but I think it’s
at least plausible that it is morally optimal for there to be some
distribution like it.&lt;/p&gt;


&lt;p&gt;This creates a, I think intrinsically quite relativistic, stance of
“I acknowledge that this duty would be good to take on, and that it is
good that you have done, but I’m not going to choose to adopt it”.
Perhaps this is a &lt;a href="https://notebook.drmaciver.com/posts/2024-01-17-09:02.html"&gt;cheeseburger
ethics&lt;/a&gt; thing but it feels different to me.&lt;/p&gt;


&lt;p&gt;This also ties into the skill issue. Many of these duties exist
&lt;em&gt;because you notice things&lt;/em&gt;, and one of the key things expertise
does is change your perception of the world. Possessing a skill, even
when you’re not actively using it, can cause all sorts of things to come
into focus that you’d otherwise miss.&lt;/p&gt;


&lt;p&gt;Note for readers: It was at this point I started running out of steam
in writing this and wanting to wrap it up, so the rest will be more of a
sketch than I intended it to be.&lt;/p&gt;


&lt;p&gt;The other thing that I think drives these sorts of individual moral
duties is something like character. e.g. our professions don’t exist in
isolation. If we’re an engineer, we are implicitly committing to being
the sort of person who can do engineering well, and this will tend to
bleed into other areas &lt;em&gt;and we should probably let it&lt;/em&gt;.&lt;/p&gt;


&lt;p&gt;For example, another thing that came up in discussion of the
responsibilities post is that, as (responsible) software developers,
when problems occur with systems we see, we want to fix the system not
just the problem, and this isn’t widely shared. It seems both good to
retain this habit, both because it’s generally useful and also because
it’s part of the habit of character that allows us to be good at our
jobs, but also it’s sortof hard to argue that it’s a moral duty for
someone who doesn’t have a great deal of professional feedback on how to
develop this skill to also do these things, and a little unreasonable
for us to expect them to understand it when we try to point this out.&lt;label class="margin-toggle sidenote-number" for="fn9"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn9" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Though I still want them to fix the issue, dammit.&lt;/span&gt; This is the skill issue again, but
running in the other direction: It’s not just that the skill alerts us
to obligations that we already have, but that trying to suppress the use
of it is in some sense detrimental to our character as developers.&lt;/p&gt;


&lt;p&gt;All of this remains fully compatible with the possibility of a shared
broad moral framework, but the problem is that you can’t really
implement the fully worked out broad moral framework on humans. If Alex
and Charlie have their own moral frameworks with their own well thought
out details, there almost certainly &lt;em&gt;is&lt;/em&gt; a moral framework that
unifies the two - it’s the shared framework, as implemented by someone
who has full knowledge of all of Alex and Charlie’s experiences and
possesses all of their skills. The problem is, taking that union quickly
exceeds human capacities.&lt;/p&gt;


&lt;p&gt;For my part, I find it easier to think about this in terms of people
just having different moral frameworks. There are practices for sharing
things between our moral frameworks and a broad practice of moral
discourse, and in general we should expect our moral frameworks to be
more or less similar to those we share characteristics with and discuss
our lives with, but there remain plenty of incompatibilities where I can
acknowledge your moral duty as a moral truth for you, but choose not to
take it on as my own..&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-02-07-07:44.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-02-16-11:33.html</id>
    <title>Silently losing critical life infrastructure</title>
    <updated>2024-02-16T12:59:48+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;Silently losing critical life infrastructure&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-02-16&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;I’ve been having a pretty bad time recently. I don’t intend to talk
about the details, but suffice it to say I’ve been extremely stressed,
depressed, and anxious, and my appetite and sleep have completely fallen
apart.&lt;/p&gt;


&lt;p&gt;This isn’t about that, not directly. It’s about some interesting
things that this has revealed about my personal infrastructure for
supporting my mental health.&lt;/p&gt;


&lt;p&gt;One piece of infrastructure is the daily writing. That completely
dropped off during this period, as you’ve probably noticed. I think
that’s… fine. The daily writing is absolutely intended as a mood and
meaning-making support, but it’s designed for chronic conditions, and I
think in acute cases it diverts resources that probably need to be spent
elsewhere. I’m not sure that’s true, but it felt impossible to continue,
so I didn’t. Maybe that was a mistake but I’m not sure what I could have
done differently at the time.&lt;/p&gt;


&lt;p&gt;Another piece of mental health infrastructure that &lt;em&gt;hasn’t&lt;/em&gt;
fallen off on the other hand is exercise. I’ve kept going to Pilates,
I’ve kept going to the gym. I haven’t necessarily done a great job of
it, but I’ve kept going and that’s I think been helpful. Insufficient to
solve the problems, but that’s a bit much to ask of it. The fact that it
was somethign that I could just show up to and it’s fine even if I don’t
particularly engage with it made it infrastructure that didn’t fall
apart in a crisis.&lt;/p&gt;


&lt;p&gt;Another thing I’m tentatively chalking up to an infrastructure
success is that, astonishingly, I haven’t really got significantly ill
during this time period, despite illness sweeping the house. This might
be my body going “I don’t have time to get ill!!!” and I’m going to get
every cold at once when I finally relax, but I’m chalking this up as
tentative evidence that &lt;a href="https://notebook.drmaciver.com/posts/2024-02-01-15:09.html"&gt;this
nonsense zinc mouthwash I’m using&lt;/a&gt; really is doing something.&lt;/p&gt;


&lt;p&gt;But there are two interesting major failures of infrastructure, which
it turns out fell apart before things went wrong and I only discovered
that they’d fallen apart too late.&lt;/p&gt;


&lt;p&gt;The first is that I’d run out of sleeping pills months ago. This is,
in the normal course of things, absolutely fine. A normal heavy period
of using sleeping pills for me involves taking half a tablet in a month,
and I’d figured out non-chemical tools for getting to sleep on difficult
nights, so when my single packet of sleeping pills that I’d had for over
a year ran out, I didn’t think it was worth renewing. It took me until
my third night on two hours of sleep to realise that this was
incorrect.&lt;/p&gt;


&lt;p&gt;Fortunately I managed to get an emergency sleeping pill prescription
on a Friday and took half a pill every night for a few nights until the
worst of the acute night-time anxiety had passed. I’m now (thankfully, I
hate the experience of using them, I just hate it less than the
experience of not using them when I need them) managing to sleep merely
badly without them, so I’m back to not using them again, but they were
an absolute life saver both for getting through the bad nights and also
for being functional enough to get things moving in the right
direction.&lt;/p&gt;


&lt;p&gt;I don’t necessarily want to say that it was a mistake to not renew my
sleeping pill prescription. I genuinely thought I didn’t need them any
more, and I’ve gone most of my life just fine without having them. I
think it was an arguably reasonable call at the time. But I’m sure not
going to let myself be in a situation where I don’t have any sleeping
pills left again.&lt;/p&gt;


&lt;p&gt;I think this is an interesting example because the sleeping pills are
very much dampeners for low probability events. The normal events they
damp out are something like 3% probability events, and are survivable
without them. Nights like I’ve been having recently where I get 2 hours
sleep are maybe something like… 0.2% probability events, in that I maybe
get a night that bad every few years. Having several nights like that in
a row is too unprecedented for me to assign a probability. I think it’s
a proper black swan event for me, as I wouldn’t actually have predicted
it was possible - I’d have assumed the first night would exhaust me
enough that the second night I would sleep no matter how anxious I
was.&lt;/p&gt;


&lt;p&gt;So what happened is that all of the events of medium severity that
happened sufficiently often that I regularly encountered them were now
solved, and I incorrectly generalised from this to determine that the
infrastructure was no longer useful, and this turned out to be
incorrect.&lt;/p&gt;


&lt;p&gt;Anyway, having experienced this, I declared my lesson learned and
that I would no longer abandon infrastructure that was a solution to a
predictable class of problems, even if I thought it was no longer
necessary.&lt;/p&gt;


&lt;p&gt;This makes the second infrastructure failure especially
infuriating.&lt;/p&gt;


&lt;p&gt;A few days ago, I was talking to Lisa about how everything was
terrible and I was utterly miserable. Then I went to bed. Then I came
down about an hour later to get something, and we talked a bit, and she
noted that I’d perked up significantly in that hour. “Huh, have I?” was
my response, and I went back to bed.&lt;/p&gt;


&lt;p&gt;Then I introspected and decided she was right. It’s not that anything
had become less terrible than it was previously, but it sure felt more
manageable. There were major problems, but I could engage with them
rather than despair about them.&lt;/p&gt;


&lt;p&gt;Then I thought about it a bit more and realised that I was an
absolute fucking idiot.&lt;/p&gt;


&lt;p&gt;What had happened between those two times was that I’d gone “Oh yeah,
&lt;a href="https://acesounderglass.com/2023/09/08/luck-based-medicine-inositol/"&gt;inositol&lt;/a&gt;
helps with my mood, and I’ve got a bit left, maybe I should take some
inositol”, so I took some inositol.&lt;/p&gt;


&lt;p&gt;I’d stopped taking it a few months ago, not really through any
deliberate decision, it just stopped doing much for me. I attributed
this to the fact that my diet had improved and I was regularly taking a
probiotic. At some point I’d mostly run out and stopped having a regular
supplement regime so it just got quietly forgotten.&lt;/p&gt;


&lt;p&gt;Unfortunately, I stopped having a regular supplement regime, so I
also stopped reliably taking my probiotic.&lt;/p&gt;


&lt;p&gt;Also, as I got more stressed, my appetite was suppressed and I was
eating less well.&lt;/p&gt;


&lt;p&gt;So, apparently, quietly, all of the problems that inositol solved for
me previously, gradually and quietly came back, and because things were
actually terrible, and because I didn’t have a good poitn of comparison
of events on and off inositol, I didn’t realise that that was what was
happening.&lt;/p&gt;


&lt;p&gt;Anyway, I’ve been taking it regularly again for a few days, and the
effect has persisted. Everything is still terrible, but I’m more able to
cope.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Admittedly there are some other improvements in the
situation which help, but there does feel like a qualitative difference
that I can’t explain with that alone.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;This is interestingly almost the polar opposite of the sleeping pill
thing, because it’s a chronic problem that gets worse in… I don’t want
to say non-obvious, because the results are very obvious, but let’s say
difficult-to-attribute ways… if I neglect the infrastructure
maintenance. I don’t realise I need it not because of the irregularity
of the events, but because of the regularity of the events. If I don’t
ever take the inositol, I don’t notice how large the impact of it is,
and the fact that my mental health infrastructure is in slow collapse
just looks like everything being terrible.&lt;/p&gt;


&lt;p&gt;I’m not sure I have a good generalised lesson from this other than
“Yes, David, you need to take the fucking inositol even if you don’t
think it’s doing something”, but I do want to share a related
observation from the other day.&lt;/p&gt;


&lt;p&gt;There are two different skills for dealing with anxiety. One of them
&lt;a href="https://notebook.drmaciver.com/posts/2020-05-20-17:58.html"&gt;I’ve
written about before&lt;/a&gt; and is about only feeling anxiety in situations
where it’s an appropriate response. But the other, equally important
one, is that when the appropriate response is a high level of anxiety,
you should be able to deal with it.&lt;/p&gt;


&lt;p&gt;In this case I couldn’t really say anxiety was inappropriate. &lt;a href="https://notebook.drmaciver.com/posts/2020-04-03-13:40.html"&gt;There
was a high level of uncertainty&lt;/a&gt; and it was legitimately scary&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;There still is. But also there was.&lt;/span&gt;. But &lt;em&gt;boy&lt;/em&gt; was I not able to
deal with it. At the time I thought this was a generalisable thing about
me, and to some degree it is, but in retrospect I was dealing with it
much less well than I might have.&lt;/p&gt;


&lt;p&gt;So I guess this leaves me with the following question: If you’re
struggling to deal with something, is this maybe because the
infrastructure you’d use to deal with it has collapsed or gone away and
you didn’t notice because you didn’t think you needed it any more?&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-02-16-11:33.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-03-16-13:07.html</id>
    <title>Finding exercise motivations that work</title>
    <updated>2024-03-16T14:58:28+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;Finding exercise motivations that work&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-03-16&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;I’ve &lt;a href="https://notebook.drmaciver.com/posts/2024-01-02-12:48.html"&gt;mentioned
before&lt;/a&gt; that I have 3 aspirations for this year, and that one of them
is health and exercise.&lt;/p&gt;


&lt;p&gt;That’s been going pretty well (unlike the other two - writing went
well for a while and then became erratic, but should be improving soon
to nowish. I continue to be bad at seeing friends), and I think one
reason why is that I’ve finally hit on a motivation that actually works
for me for &lt;em&gt;wanting&lt;/em&gt; to exercise, as opposed to merely wanting
the results of exercising.&lt;/p&gt;


&lt;p&gt;It’s this: I now have specific movements or positions that I look at
and feel that I want to be able to do them, and incremenetal
improvements in that direction feel motivating.&lt;/p&gt;


&lt;p&gt;In contrast, many of the motivations other people have for exercising
don’t work for me. For example some people do it for the endorphin rush
(I get no appreciable endorphin rush from exercise), and some people
find making numbers go up satisfying - e.g. number of reps, amount of
weight lifted (I’m not intrinsically opposed to making numbers go up but
I need a tighter feedback loop to care about it unless I have some
particular reason to care about these numbers in particular).&lt;/p&gt;


&lt;p&gt;In contrast, specific movements feel easy to orient towards in a way
that makes me want to do more exercise, which sets me up in a virtuous
cycle - the more exercise I do, the more related things I encounter that
feel motivating to try to achieve.&lt;/p&gt;


&lt;p&gt;There are two core things that are working for me this way: Asian
Squat (flat footed squat as a resting position) and crow pose (aka
bakasana - a sort of crouched hand stand).&lt;/p&gt;


&lt;p&gt;Why these in particular?&lt;/p&gt;


&lt;p&gt;Asian Squat is partly prompted by a variety of youtube videos - I
think I originally got into it because of Taro Iwamoto’s Feldenkrais
channel, but it might equally have been Upright Health or one of several
others. They’ve got plenty of good reasons as to why this is an
important thing to be able to do, but those don’t really motivate me
that much.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I mean they do a bit in that one of the goals of my
exercise program is to not be in pain and these connect up to that, but
that doesn’t feel quite enough to be a complete motivation.&lt;/span&gt; What actually motivates me about it
is that it feels like a motion I &lt;em&gt;should&lt;/em&gt; be able to do. I squat
down a lot and I’d like to be able to maintain a squat indefinitely as a
seating position, and it feels sortof ridiculous that in that position I
can’t actually get my heels down to the floor without something to help
me balance forward.&lt;/p&gt;


&lt;p&gt;One piece of context here is that I’m quite hypermobile, and it feels
like there’s a lot of positions that I just naturally should be able to
do and can’t any more because I’ve stiffened up in bad ways. So a lot of
the “I should be able to do this” feeling here is something like “This
feels like a part of my body’s natural range of movement that I’ve
lost”, and so the feeling that it’s ridiculous that I can’t do it is
nicely aligned with my goals of trying to improve.&lt;/p&gt;


&lt;p&gt;Crow pose on the other hand has a very different felt sense
associated with my desire to do it: Crow pose looks really fucking
cool.&lt;/p&gt;


&lt;p&gt;This isn’t all of it, don’t get me wrong. I wouldn’t do something
that I &lt;em&gt;disliked&lt;/em&gt; doing for that reason, and crow pose and things
like it are reasonably fun. But the thing that makes me actively want to
be able to do crow pose properly is that it makes you look like a
badass, and correspondingly feel like one, and apparently that’s
motivating to me.&lt;/p&gt;


&lt;p&gt;I’m not sure anyone is going to look at my current attempts at crow
pose (I can sometimes manage about 5-10 seconds of a fairly shaky crow
pose) and have that reaction, but I must admit I do for a fraction of a
second feel like a god when I manage to get both feet off the ground and
balance on my hand. At some point I’m sure I’ll stop feeling impressed
with that, but hopefully by that point I’ll have gotten crow pose good
enough that there will be other moves to aspire to.&lt;/p&gt;


&lt;p&gt;Sasha has a recent post &lt;a href="https://sashachapin.substack.com/p/theres-nothing-wrong-with-doing-things"&gt;There’s
nothing wrong with doing things because you want to look good&lt;/a&gt; about
how it’s OK to do exercises that focus on building muscles that will
look good rather than on pure functional strength. I 100% endorse this
message, but also have absolutely no interest in following this advice
myself - if anything, I think my exercise motivations end up lining up
more with the functional strength crowd than building a nice ripped
upper body.&lt;/p&gt;


&lt;p&gt;Nevertheless, I think that spiritually my goal is very similar to
his: I want to be able to move in a way that makes other people go “holy
shit, wow”.&lt;/p&gt;


&lt;p&gt;I think if I’d paid attention I’d have noticed that this was
something I found motivating long ago. I have a memory of my cousin and
his wife practicing yoga at a family reunion some time ago&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;10 years? Closer to 20? It’s unreasonable that I have
this much history to index. I would like to file a bug report about the
passage of time.&lt;/span&gt; and
doing a bunch of exercises that triggered precisely this sort of awed
reaction.&lt;/p&gt;


&lt;p&gt;At the time I was bad at recognising that I wanted things,&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I still am, but I was at the time too.&lt;/span&gt; so this didn’t in any way turn into
a sense of “I want to be able to do that”, and trying to attribute that
sense retrospectively may be fake but I do think it was probably
there.&lt;/p&gt;


&lt;p&gt;I’ve increasingly been feeling like there’s an interesting
intertwining of exercise and therapy skills - a lot of the time in
pilates, figuring out what was going wrong with a particular exercise
involves a similar sort of paying attention to a felt sense and how to
work with it that I’ve learned in Focusing style therapy, which often
leads into a particular series of mental motions that feels like
rummaging around for the right muscle and how to engage it.&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I particularly have this with feet. I don’t know why,
except that feet are complicated and I don’t use mine very well.&lt;/span&gt; This movement-focused sort of
exercise motion feels like it’s even more at the intersection of the
two, because it involves finding out how my body wants to move and then
learning how to do that.&lt;/p&gt;


&lt;p&gt;Although Asian Squat and Crow Pose are the two current big
motivations, it doesn’t really stop there, because this often comes out
in small things.&lt;/p&gt;


&lt;p&gt;Here’s an example: I have a place in my study where I’ve stacked up
two tatami mats (why two? Well because I had two from a previous place,
but only had space for one, so I just put one on top of the other).
Often I sit on the edge of them. I noticed recently that I couldn’t
actually easily get up directly from that position - I couldn’t get my
legs to engage in the right way. I could do it easily enough by rocking
forward of course, and using my hands makes it trivial&lt;label class="margin-toggle sidenote-number" for="fn5"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn5" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Ages ago I heard that inability to get up from the floor
without using your hands was one of the strongest predictors of things
going very badly for you in old age and ever since then I’ve been
low-grade obsessed with how I get off the floor from sitting and making
sure I almost never use my hands.&lt;/span&gt;,
but going straight from butt-on-the-mat to vertical felt almost
impossible. A little bit of practice later it’s mostly trivial. This
turned out to be almost all about finding the right way to engage my
muscles, not really about strength.&lt;/p&gt;


&lt;p&gt;Other things that I’ve noticed are motivating include:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;I want to be able to bend over, straight legged, and put my palms on
the floor.&lt;/li&gt;
&lt;li&gt;I want to be able to put my foot behind my head.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These might seem like uh stretch goals for a 40 year old man, but
honestly they’re pretty close to being within my capabilities. I can get
pretty close to straight-legged with my palms on the floor, though it’s
a fairly intense stretch, and head to foot is a perfectly viable (if,
again, intense) position for me. As I said, hypermobile. It’s a
superpower as well as a curse.&lt;label class="margin-toggle sidenote-number" for="fn6"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn6" type="checkbox"/&gt;&lt;span class="sidenote"&gt;It’s a curse because I’ve never learned to use it
properly and this is, I think, where all my chronic pain comes from.&lt;/span&gt; I don’t know if I’ll
ever be able to fully do these, but they do feel like they’re at least
pointing in a good direction.&lt;/p&gt;


&lt;p&gt;On top of this there’s a sort of character of movement that feels
desirable… something like “fluid strength” - it’s not just about the
positions, but about being able to move between them, and naturally
doing so all the time. It’s also about being able to just casually have
strength in day to day movements.&lt;label class="margin-toggle sidenote-number" for="fn7"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn7" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Although TBH the only day to day movement where I really
need strength is a child who likes being picked up despite being
increasingly too tall for this.&lt;/span&gt; Something about that
sort of style feels fairly strongly desirable.&lt;/p&gt;


&lt;p&gt;A lot of the solution to this is just “do more yoga” of course, and I
am. I’ve been doing a little one-on-one yoga instruction recently, and
am going to start going to group classes with the same teacher this
week. If that goes well, I’ll probably add in a second one.&lt;/p&gt;


&lt;p&gt;But crucially I don’t think just going to yoga classes would have got
me to where I am. Maybe one-on-one instruction would have - one-on-one
pilates instruction was definitely instrumental in getting me to pay
attention to movement and strength and how it feels to notice what was
desirable - but I don’t think group classes could, because it’s not that
yoga is inherently motivating, it’s that there are specific
characteristics of it that are desirable. I’m worried that in a group
class I wouldn’t have been able to notice them because the environment
is so emotionally noisy.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-03-16-13:07.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-07-31-14:05.html</id>
    <title>Asymmetric vices and the unity of virtue</title>
    <updated>2024-07-31T14:16:15+01:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;Asymmetric vices and the unity of virtue&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-07-31&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;I was trying to find a post I’d written about this and then realised
it was &lt;a href="https://x.com/DRMacIver/status/1662193450450649092"&gt;a
Twitter thread&lt;/a&gt;. This post is just me copying out that thread and
lightly editing it for format so I have somewhere more stable to refer
to it.&lt;/p&gt;


&lt;p&gt;Aristotle’s conception of “virtue” is as a golden mean between two
vices: One of deficit, one of success. e.g. courage is the virtue that
lies between cowardice and foolhardiness.&lt;/p&gt;


&lt;p&gt;Something I realised is that there’s a sort of fundamental asymmetry
between these two vices. A vice of excess has a totally different
character from a vice of deficit. If you think of a virtue as a kind of
drive in a direction, one vice is a lack of that drive, but the other is
not in fact an excess of it.&lt;/p&gt;


&lt;p&gt;Take honesty as the virtue defined by valuing truth. A dearth of
valuing truth is certainly a vice. But the vice of being “too honest” is
not really about valuing truth too much. An excess of honesty is bad not
because too much truth is bad but because of non-truth considerations.
e.g. you’re overly blunt if you tell the truth without consideration for
others’ feelings. You’re foolhardy if you speak truth to power without
care for consequences.&lt;/p&gt;


&lt;p&gt;The vice of being overly honest is not that your drive to truth is
too strong, but that you’ve not stabilised it by taking into account
other things.&lt;/p&gt;


&lt;p&gt;What other things do you need to take into account? Anything you
value.&lt;/p&gt;


&lt;p&gt;Not everything you value is valued for good reasons. e.g. if you tell
or omit the truth in the circumstances where that is the right thing to
do, but it’s because you’re lazy and it’s too hard work in the cases
where you should be circumspect, that’s not true virtue even if results
are good.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;In large part because this is not going to reliably
track the situations in which you should tell or omit the truth. If
somehow laziness were exactly tracking the right thing to do, I think it
would be reasonable to call it a virtue, but it doesn’t. Sometimes you
need to tell the truth even when it’s hard work.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;What’s a properly virtuous stabilising force?&lt;/p&gt;


&lt;p&gt;Well, another virtue.&lt;/p&gt;


&lt;p&gt;You are properly practicing the virtue of honesty if your desire for
truth is tempered by the other virtuous desires you’ve cultivated.
i.e. the proper exercise of a virtue requires that it be tempered by all
the others.&lt;/p&gt;


&lt;p&gt;This is not, I think, exactly what Aristotle means by the unity of
the virtues, but it’s pretty close.&lt;/p&gt;


&lt;p&gt;It is, however, partly an artifact of us insisting that there
&lt;em&gt;is&lt;/em&gt; a unified good to aim for, and it’s not clear that all such
goods unify the same way.&lt;/p&gt;


&lt;p&gt;If we take the drive towards truth, this is not naturally unified
with the drive to face fears. But once we allow for the fact that both
matter, we are forced to unify them in some way by allowing for there to
be an “appropriate” amount of each, in which each balances the
other.&lt;/p&gt;


&lt;p&gt;By defining virtues as the appropriate level of exercising individual
drives for the good, we demand their unity, because without unity we
cannot have a suitable notion of “appropriate”.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-07-31-14:05.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-09-22-14:28.html</id>
    <title>Set operations on SAT problems</title>
    <updated>2024-09-22T17:58:14+01:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;Set operations on SAT problems&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-09-22&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;I’ve figured out a neat trick recently that I’ve not seen before,
although I don’t know if it’s actually novel. It’s a fairly general
method for manipulating SAT problems in CNF form to perform arbitrary
set options on their solution set, without adding additional variables
to the problem.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;It’s somewhere between well-known and obvious that you
can do it with adding additional variables, and I make use of that for
doing this.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;(Disclaimer: The idea definitely works, and I’ve run the code I’m
posting and it seems to work, but it’s undertested and may be buggy)&lt;/p&gt;


&lt;p&gt;Here’s some code for calculating the set difference of two SAT
problems expressed in CNF:&lt;/p&gt;


&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;from&lt;/span&gt; pysat.solvers &lt;span class="im"&gt;import&lt;/span&gt; Glucose4&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a aria-hidden="true" href="#cb1-2" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;from&lt;/span&gt; .cnfbuilder &lt;span class="im"&gt;import&lt;/span&gt; CNFBuilder&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a aria-hidden="true" href="#cb1-3" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a aria-hidden="true" href="#cb1-4" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a aria-hidden="true" href="#cb1-5" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; setminus(A: &lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;int&lt;/span&gt;]], B: &lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;int&lt;/span&gt;]]) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;list&lt;/span&gt;[&lt;span class="bu"&gt;int&lt;/span&gt;]]:&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a aria-hidden="true" href="#cb1-6" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Returns a set of SAT clauses such that the satisfying&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a aria-hidden="true" href="#cb1-7" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    solutions are precisely the satisfying solutions of A that&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a aria-hidden="true" href="#cb1-8" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    do not satisfy B.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a aria-hidden="true" href="#cb1-9" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a aria-hidden="true" href="#cb1-10" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    A, B are SAT formulae represented in CNF in the usual way&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a aria-hidden="true" href="#cb1-11" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    (positive literals correspond to a variable, negative literals&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a aria-hidden="true" href="#cb1-12" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    to the negation fo that variable). The returned formula is in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a aria-hidden="true" href="#cb1-13" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    the same format.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a aria-hidden="true" href="#cb1-14" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    """&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a aria-hidden="true" href="#cb1-15" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a aria-hidden="true" href="#cb1-16" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# Set of clauses that we incrementally expand until their&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a aria-hidden="true" href="#cb1-17" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# satisfying solutions are solutions(A) - solutions(B).&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a aria-hidden="true" href="#cb1-18" tabindex="-1"&gt;&lt;/a&gt;    result_clauses &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;(A)&lt;/span&gt;
&lt;span id="cb1-19"&gt;&lt;a aria-hidden="true" href="#cb1-19" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-20"&gt;&lt;a aria-hidden="true" href="#cb1-20" tabindex="-1"&gt;&lt;/a&gt;    B &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;(B)&lt;/span&gt;
&lt;span id="cb1-21"&gt;&lt;a aria-hidden="true" href="#cb1-21" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-22"&gt;&lt;a aria-hidden="true" href="#cb1-22" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# We are only interested in clauses in B that are not also in A,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-23"&gt;&lt;a aria-hidden="true" href="#cb1-23" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# as every clause that is in A is always satisfied by an element&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-24"&gt;&lt;a aria-hidden="true" href="#cb1-24" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# of our result.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-25"&gt;&lt;a aria-hidden="true" href="#cb1-25" tabindex="-1"&gt;&lt;/a&gt;    target_clauses &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="bu"&gt;tuple&lt;/span&gt;(&lt;span class="bu"&gt;sorted&lt;/span&gt;(c)) &lt;span class="cf"&gt;for&lt;/span&gt; c &lt;span class="kw"&gt;in&lt;/span&gt; B} &lt;span class="op"&gt;-&lt;/span&gt; {&lt;span class="bu"&gt;tuple&lt;/span&gt;(&lt;span class="bu"&gt;sorted&lt;/span&gt;(c)) &lt;span class="cf"&gt;for&lt;/span&gt; c &lt;span class="kw"&gt;in&lt;/span&gt; A}&lt;/span&gt;
&lt;span id="cb1-26"&gt;&lt;a aria-hidden="true" href="#cb1-26" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-27"&gt;&lt;a aria-hidden="true" href="#cb1-27" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# Every element of A satisfies B, so the set is empty.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-28"&gt;&lt;a aria-hidden="true" href="#cb1-28" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; target_clauses:&lt;/span&gt;
&lt;span id="cb1-29"&gt;&lt;a aria-hidden="true" href="#cb1-29" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; [[&lt;span class="dv"&gt;1&lt;/span&gt;], [&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;]]&lt;/span&gt;
&lt;span id="cb1-30"&gt;&lt;a aria-hidden="true" href="#cb1-30" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-31"&gt;&lt;a aria-hidden="true" href="#cb1-31" tabindex="-1"&gt;&lt;/a&gt;    builder &lt;span class="op"&gt;=&lt;/span&gt; CNFBuilder(A)&lt;/span&gt;
&lt;span id="cb1-32"&gt;&lt;a aria-hidden="true" href="#cb1-32" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-33"&gt;&lt;a aria-hidden="true" href="#cb1-33" tabindex="-1"&gt;&lt;/a&gt;    b_is_satisfied &lt;span class="op"&gt;=&lt;/span&gt; builder.&lt;span class="bu"&gt;all&lt;/span&gt;([builder.&lt;span class="bu"&gt;any&lt;/span&gt;(c) &lt;span class="cf"&gt;for&lt;/span&gt; c &lt;span class="kw"&gt;in&lt;/span&gt; target_clauses])&lt;/span&gt;
&lt;span id="cb1-34"&gt;&lt;a aria-hidden="true" href="#cb1-34" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-35"&gt;&lt;a aria-hidden="true" href="#cb1-35" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# This is a set of clauses for the intersection of our current&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-36"&gt;&lt;a aria-hidden="true" href="#cb1-36" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# best answer with B. If these are satisfiable we're not done yet.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-37"&gt;&lt;a aria-hidden="true" href="#cb1-37" tabindex="-1"&gt;&lt;/a&gt;    intersection_clauses &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;(A) &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;(B)&lt;/span&gt;
&lt;span id="cb1-38"&gt;&lt;a aria-hidden="true" href="#cb1-38" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-39"&gt;&lt;a aria-hidden="true" href="#cb1-39" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# This is a set of clauses with new variables introduced&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-40"&gt;&lt;a aria-hidden="true" href="#cb1-40" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# such that an assignment is valid iff it can be extended&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-41"&gt;&lt;a aria-hidden="true" href="#cb1-41" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# to a valid assignment of these clauses.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-42"&gt;&lt;a aria-hidden="true" href="#cb1-42" tabindex="-1"&gt;&lt;/a&gt;    general_clauses &lt;span class="op"&gt;=&lt;/span&gt; builder.clauses &lt;span class="op"&gt;+&lt;/span&gt; [[&lt;span class="op"&gt;-&lt;/span&gt;b_is_satisfied]]&lt;/span&gt;
&lt;span id="cb1-43"&gt;&lt;a aria-hidden="true" href="#cb1-43" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-44"&gt;&lt;a aria-hidden="true" href="#cb1-44" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;while&lt;/span&gt; &lt;span class="va"&gt;True&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb1-45"&gt;&lt;a aria-hidden="true" href="#cb1-45" tabindex="-1"&gt;&lt;/a&gt;        solver &lt;span class="op"&gt;=&lt;/span&gt; Glucose4(intersection_clauses)&lt;/span&gt;
&lt;span id="cb1-46"&gt;&lt;a aria-hidden="true" href="#cb1-46" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; solver.solve():&lt;/span&gt;
&lt;span id="cb1-47"&gt;&lt;a aria-hidden="true" href="#cb1-47" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;return&lt;/span&gt; result_clauses&lt;/span&gt;
&lt;span id="cb1-48"&gt;&lt;a aria-hidden="true" href="#cb1-48" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-49"&gt;&lt;a aria-hidden="true" href="#cb1-49" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# This is a solution to our result_clauses that is also in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-50"&gt;&lt;a aria-hidden="true" href="#cb1-50" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# B, and so indicates that we're not done.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-51"&gt;&lt;a aria-hidden="true" href="#cb1-51" tabindex="-1"&gt;&lt;/a&gt;        counter_example &lt;span class="op"&gt;=&lt;/span&gt; solver.get_model()&lt;/span&gt;
&lt;span id="cb1-52"&gt;&lt;a aria-hidden="true" href="#cb1-52" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-53"&gt;&lt;a aria-hidden="true" href="#cb1-53" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# We now feed it in to the general clauses. This cannot be&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-54"&gt;&lt;a aria-hidden="true" href="#cb1-54" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# extended to a satisfying solution, because a solution is&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-55"&gt;&lt;a aria-hidden="true" href="#cb1-55" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# satisfying for general_clauses if and only if it corresponds&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-56"&gt;&lt;a aria-hidden="true" href="#cb1-56" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# to the unique extension of some satisfaction of A setminus B.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-57"&gt;&lt;a aria-hidden="true" href="#cb1-57" tabindex="-1"&gt;&lt;/a&gt;        clause_generator &lt;span class="op"&gt;=&lt;/span&gt; Glucose4(general_clauses)&lt;/span&gt;
&lt;span id="cb1-58"&gt;&lt;a aria-hidden="true" href="#cb1-58" tabindex="-1"&gt;&lt;/a&gt;        solved &lt;span class="op"&gt;=&lt;/span&gt; clause_generator.solve(assumptions&lt;span class="op"&gt;=&lt;/span&gt;counter_example)&lt;/span&gt;
&lt;span id="cb1-59"&gt;&lt;a aria-hidden="true" href="#cb1-59" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; solved&lt;/span&gt;
&lt;span id="cb1-60"&gt;&lt;a aria-hidden="true" href="#cb1-60" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-61"&gt;&lt;a aria-hidden="true" href="#cb1-61" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# This gives us a minimal clause that any solution to A setminus B must&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-62"&gt;&lt;a aria-hidden="true" href="#cb1-62" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# satisfy k&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-63"&gt;&lt;a aria-hidden="true" href="#cb1-63" tabindex="-1"&gt;&lt;/a&gt;        core &lt;span class="op"&gt;=&lt;/span&gt; clause_generator.get_core()&lt;/span&gt;
&lt;span id="cb1-64"&gt;&lt;a aria-hidden="true" href="#cb1-64" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; core &lt;span class="kw"&gt;is&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; &lt;span class="va"&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-65"&gt;&lt;a aria-hidden="true" href="#cb1-65" tabindex="-1"&gt;&lt;/a&gt;        new_clause &lt;span class="op"&gt;=&lt;/span&gt; [&lt;span class="op"&gt;-&lt;/span&gt;v &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; core]&lt;/span&gt;
&lt;span id="cb1-66"&gt;&lt;a aria-hidden="true" href="#cb1-66" tabindex="-1"&gt;&lt;/a&gt;        general_clauses.append(new_clause)&lt;/span&gt;
&lt;span id="cb1-67"&gt;&lt;a aria-hidden="true" href="#cb1-67" tabindex="-1"&gt;&lt;/a&gt;        intersection_clauses.append(new_clause)&lt;/span&gt;
&lt;span id="cb1-68"&gt;&lt;a aria-hidden="true" href="#cb1-68" tabindex="-1"&gt;&lt;/a&gt;        result_clauses.append(new_clause)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where CNFBuilder is the following fairly straightforward class for
building up a set of clauses:&lt;/p&gt;


&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb2-1"&gt;&lt;a aria-hidden="true" href="#cb2-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; CNFBuilder:&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a aria-hidden="true" href="#cb2-2" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;def&lt;/span&gt; &lt;span class="fu"&gt;__init__&lt;/span&gt;(&lt;span class="va"&gt;self&lt;/span&gt;, clauses):&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a aria-hidden="true" href="#cb2-3" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.clauses &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;list&lt;/span&gt;(clauses)&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a aria-hidden="true" href="#cb2-4" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.__nextvar &lt;span class="op"&gt;=&lt;/span&gt; (&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a aria-hidden="true" href="#cb2-5" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="bu"&gt;max&lt;/span&gt;(&lt;span class="bu"&gt;abs&lt;/span&gt;(literal) &lt;span class="cf"&gt;for&lt;/span&gt; clause &lt;span class="kw"&gt;in&lt;/span&gt; clauses &lt;span class="cf"&gt;for&lt;/span&gt; literal &lt;span class="kw"&gt;in&lt;/span&gt; clause) &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a aria-hidden="true" href="#cb2-6" tabindex="-1"&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a aria-hidden="true" href="#cb2-7" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a aria-hidden="true" href="#cb2-8" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;def&lt;/span&gt; &lt;span class="bu"&gt;any&lt;/span&gt;(&lt;span class="va"&gt;self&lt;/span&gt;, variables) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;int&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a aria-hidden="true" href="#cb2-9" tabindex="-1"&gt;&lt;/a&gt;        result &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;self&lt;/span&gt;.__newvar()&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a aria-hidden="true" href="#cb2-10" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# Any variable being true implies the result variable is true.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a aria-hidden="true" href="#cb2-11" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; variables:&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a aria-hidden="true" href="#cb2-12" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="va"&gt;self&lt;/span&gt;.__implies(v, result)&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a aria-hidden="true" href="#cb2-13" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a aria-hidden="true" href="#cb2-14" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# If none of the variables are true, then any(variables) is false.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a aria-hidden="true" href="#cb2-15" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.clauses.append([&lt;span class="op"&gt;-&lt;/span&gt;result] &lt;span class="op"&gt;+&lt;/span&gt; [v &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; variables])&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a aria-hidden="true" href="#cb2-16" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; result&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a aria-hidden="true" href="#cb2-17" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a aria-hidden="true" href="#cb2-18" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;def&lt;/span&gt; &lt;span class="bu"&gt;all&lt;/span&gt;(&lt;span class="va"&gt;self&lt;/span&gt;, variables) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;int&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a aria-hidden="true" href="#cb2-19" tabindex="-1"&gt;&lt;/a&gt;        result &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;self&lt;/span&gt;.__newvar()&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a aria-hidden="true" href="#cb2-20" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; variables:&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a aria-hidden="true" href="#cb2-21" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="va"&gt;self&lt;/span&gt;.__implies(result, v)&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a aria-hidden="true" href="#cb2-22" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a aria-hidden="true" href="#cb2-23" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# If all of the variables are true, then all(variables) is true.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a aria-hidden="true" href="#cb2-24" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.clauses.append([result] &lt;span class="op"&gt;+&lt;/span&gt; [&lt;span class="op"&gt;-&lt;/span&gt;v &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; variables])&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a aria-hidden="true" href="#cb2-25" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; result&lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a aria-hidden="true" href="#cb2-26" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a aria-hidden="true" href="#cb2-27" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;def&lt;/span&gt; __implies(&lt;span class="va"&gt;self&lt;/span&gt;, l, r):&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a aria-hidden="true" href="#cb2-28" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.clauses.append([&lt;span class="op"&gt;-&lt;/span&gt;l, r])&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a aria-hidden="true" href="#cb2-29" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-30"&gt;&lt;a aria-hidden="true" href="#cb2-30" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;def&lt;/span&gt; __newvar(&lt;span class="va"&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id="cb2-31"&gt;&lt;a aria-hidden="true" href="#cb2-31" tabindex="-1"&gt;&lt;/a&gt;        result &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;self&lt;/span&gt;.__nextvar&lt;/span&gt;
&lt;span id="cb2-32"&gt;&lt;a aria-hidden="true" href="#cb2-32" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="va"&gt;self&lt;/span&gt;.__nextvar &lt;span class="op"&gt;+=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-33"&gt;&lt;a aria-hidden="true" href="#cb2-33" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let’s unpack this:&lt;/p&gt;


&lt;p&gt;We’ve got sets of clauses A, B, and we want to calculate a set of
clauses that represents the set of solutions solutions(A) -
solutions(B). We do this by starting from A, and iteratively refining it
to exclude solutions we don’t want.&lt;/p&gt;


&lt;p&gt;This works by building up a set of clauses C as follows:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;Initially, C = A. We maintain throughout that
&lt;code&gt;solutions(A) - solutions(B) subset solutions(C) subset solutions(A)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We check if there are any solutions to C that are also solutions to
B. If there are not, we’re done and
&lt;code&gt;solutions(C) = solutions(A) - solutions(B)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If not, we find a subset of the resulting assignment such that no
extension of that partial assignment can be in
&lt;code&gt;solutions(A) - solutions(B)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We add a negation of that subset to C as a new clause, and
repeat.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Part (2) is easy: If you concatenate two sets of clauses, you’ll get
a set of clauses whose solutions are precisely the intersection of the
two solutions.
i.e. &lt;code&gt;solutions(C + B) = solutions(C) &amp;amp; solutions(B)&lt;/code&gt;. So
any solution to &lt;code&gt;solutions(C) + solutions(B)&lt;/code&gt; gives us the
desired example.&lt;/p&gt;


&lt;p&gt;Part (3) is solved through two observations: Firstly, we can easily
construct a larger SAT problem with more variables such that
&lt;code&gt;x in solutions(A) - solutions(B)&lt;/code&gt; iff &lt;code&gt;x&lt;/code&gt; extends
to a solution of the larger problem. We do this by introducing variables
that correspond to B being satisfied (first we introduce a variable for
each clause in B that is not in A, and then we introduce a variable
corresponding to their intersection). We can then feed in our solution
to an incremental SAT solver, get a minimal subset of it that cannot be
extended to a solution (and thus is not present in any member of
&lt;code&gt;solutions(A) - solutions(B)&lt;/code&gt;, and add this as a clause
ruling out our counterexample and anything like it, without ruling out
any solutions we want to include.&lt;/p&gt;


&lt;p&gt;This is a fairly general solution that can be used to perform
arbitrary boolean operations on SAT problems, because the components you
need are:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;Some set of clauses representing a superset of your desired target
set.&lt;/li&gt;
&lt;li&gt;An oracle that will provide you with an example satisfying your set
of clauses that is not in the desired target set (or say that none
exists).&lt;/li&gt;
&lt;li&gt;An oracle that will take that example and turn it into clause that
every element of your desired target set satisfies.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You then just iteratively add clauses to your initial set of clauses
until you are done.&lt;/p&gt;


&lt;p&gt;You can always use the empty set of clauses for (1),&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This isn’t great though, because the runtime of this is
that it takes two calls to a SAT solver per clause added, so where
possible you want to start with a set of clauses that closely
approximates your target.&lt;/span&gt; and
in the absence of a more convenient choice of oracle for (2) you can
always construct it in the same way that the oracle for (3) is
constructed, by adding new variables.&lt;/p&gt;


&lt;p&gt;Another neat thing you can do with essentially the same idea&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;And, in fact, where I first figured this out.&lt;/span&gt; is you can take a SAT problem and
remove a variable from it&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;You can use this to refine to arbitrary subsets of the
variables by removing one variable at a time, but I’ve not found a
better way to do it than that - the natural ways of representing it all
introduce exponentially many new variables in the number of variables
you want to remove.&lt;/span&gt;, creating the set of clauses that
have a satisfying solution if and only if there is some assignment of
the removed variable that satisfies them. Here’s some code that does
that:&lt;/p&gt;


&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb3-1"&gt;&lt;a aria-hidden="true" href="#cb3-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; remove_one_variable(clauses, variable):&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a aria-hidden="true" href="#cb3-2" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Return a set of SAT clauses not containing `variable` that accepts only&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a aria-hidden="true" href="#cb3-3" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    assignments that can be turned into satisfying assignments of `clauses` through&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a aria-hidden="true" href="#cb3-4" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    a suitable choice of assignment for `variable`."""&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a aria-hidden="true" href="#cb3-5" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;assert&lt;/span&gt; variable &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a aria-hidden="true" href="#cb3-6" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a aria-hidden="true" href="#cb3-7" tabindex="-1"&gt;&lt;/a&gt;    solver &lt;span class="op"&gt;=&lt;/span&gt; Glucose4(clauses)&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a aria-hidden="true" href="#cb3-8" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a aria-hidden="true" href="#cb3-9" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# Current set of clauses representing our result set. Initially starts&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a aria-hidden="true" href="#cb3-10" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# out as all clauses that do not reference the variable to remove.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a aria-hidden="true" href="#cb3-11" tabindex="-1"&gt;&lt;/a&gt;    refined_clauses: &lt;span class="bu"&gt;list&lt;/span&gt;[Clause] &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a aria-hidden="true" href="#cb3-12" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a aria-hidden="true" href="#cb3-13" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# All clauses in the original where the variable appears positively.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a aria-hidden="true" href="#cb3-14" tabindex="-1"&gt;&lt;/a&gt;    positive_clauses &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a aria-hidden="true" href="#cb3-15" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a aria-hidden="true" href="#cb3-16" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# All clauses in the original where the variable appears negatively.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a aria-hidden="true" href="#cb3-17" tabindex="-1"&gt;&lt;/a&gt;    negative_clauses &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a aria-hidden="true" href="#cb3-18" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a aria-hidden="true" href="#cb3-19" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;for&lt;/span&gt; clause &lt;span class="kw"&gt;in&lt;/span&gt; clauses:&lt;/span&gt;
&lt;span id="cb3-20"&gt;&lt;a aria-hidden="true" href="#cb3-20" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; variable &lt;span class="kw"&gt;in&lt;/span&gt; clause:&lt;/span&gt;
&lt;span id="cb3-21"&gt;&lt;a aria-hidden="true" href="#cb3-21" tabindex="-1"&gt;&lt;/a&gt;            clause &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;sorted&lt;/span&gt;(&lt;span class="bu"&gt;set&lt;/span&gt;(clause) &lt;span class="op"&gt;-&lt;/span&gt; {variable})&lt;/span&gt;
&lt;span id="cb3-22"&gt;&lt;a aria-hidden="true" href="#cb3-22" tabindex="-1"&gt;&lt;/a&gt;            positive_clauses.append(clause)&lt;/span&gt;
&lt;span id="cb3-23"&gt;&lt;a aria-hidden="true" href="#cb3-23" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;elif&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;variable &lt;span class="kw"&gt;in&lt;/span&gt; clause:&lt;/span&gt;
&lt;span id="cb3-24"&gt;&lt;a aria-hidden="true" href="#cb3-24" tabindex="-1"&gt;&lt;/a&gt;            clause &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;sorted&lt;/span&gt;(&lt;span class="bu"&gt;set&lt;/span&gt;(clause) &lt;span class="op"&gt;-&lt;/span&gt; {&lt;span class="op"&gt;-&lt;/span&gt;variable})&lt;/span&gt;
&lt;span id="cb3-25"&gt;&lt;a aria-hidden="true" href="#cb3-25" tabindex="-1"&gt;&lt;/a&gt;            negative_clauses.append(clause)&lt;/span&gt;
&lt;span id="cb3-26"&gt;&lt;a aria-hidden="true" href="#cb3-26" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb3-27"&gt;&lt;a aria-hidden="true" href="#cb3-27" tabindex="-1"&gt;&lt;/a&gt;            refined_clauses.append(clause)&lt;/span&gt;
&lt;span id="cb3-28"&gt;&lt;a aria-hidden="true" href="#cb3-28" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-29"&gt;&lt;a aria-hidden="true" href="#cb3-29" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;assert&lt;/span&gt; positive_clauses &lt;span class="kw"&gt;or&lt;/span&gt; negative_clauses&lt;/span&gt;
&lt;span id="cb3-30"&gt;&lt;a aria-hidden="true" href="#cb3-30" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-31"&gt;&lt;a aria-hidden="true" href="#cb3-31" tabindex="-1"&gt;&lt;/a&gt;    builder &lt;span class="op"&gt;=&lt;/span&gt; CNFBuilder(refined_clauses)&lt;/span&gt;
&lt;span id="cb3-32"&gt;&lt;a aria-hidden="true" href="#cb3-32" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-33"&gt;&lt;a aria-hidden="true" href="#cb3-33" tabindex="-1"&gt;&lt;/a&gt;    positive_satisfied &lt;span class="op"&gt;=&lt;/span&gt; builder.&lt;span class="bu"&gt;all&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb3-34"&gt;&lt;a aria-hidden="true" href="#cb3-34" tabindex="-1"&gt;&lt;/a&gt;        [builder.&lt;span class="bu"&gt;any&lt;/span&gt;(clause) &lt;span class="cf"&gt;for&lt;/span&gt; clause &lt;span class="kw"&gt;in&lt;/span&gt; positive_clauses]&lt;/span&gt;
&lt;span id="cb3-35"&gt;&lt;a aria-hidden="true" href="#cb3-35" tabindex="-1"&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id="cb3-36"&gt;&lt;a aria-hidden="true" href="#cb3-36" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-37"&gt;&lt;a aria-hidden="true" href="#cb3-37" tabindex="-1"&gt;&lt;/a&gt;    negative_satisfied &lt;span class="op"&gt;=&lt;/span&gt; builder.&lt;span class="bu"&gt;all&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb3-38"&gt;&lt;a aria-hidden="true" href="#cb3-38" tabindex="-1"&gt;&lt;/a&gt;        [builder.&lt;span class="bu"&gt;any&lt;/span&gt;(clause) &lt;span class="cf"&gt;for&lt;/span&gt; clause &lt;span class="kw"&gt;in&lt;/span&gt; negative_clauses]&lt;/span&gt;
&lt;span id="cb3-39"&gt;&lt;a aria-hidden="true" href="#cb3-39" tabindex="-1"&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id="cb3-40"&gt;&lt;a aria-hidden="true" href="#cb3-40" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-41"&gt;&lt;a aria-hidden="true" href="#cb3-41" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# These clauses are satisfied if and only if all of our&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-42"&gt;&lt;a aria-hidden="true" href="#cb3-42" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# current result clauses are satisfied but there is no possible&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-43"&gt;&lt;a aria-hidden="true" href="#cb3-43" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# assignment of the removed variable that makes the original set&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-44"&gt;&lt;a aria-hidden="true" href="#cb3-44" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# of clauses satisfied.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-45"&gt;&lt;a aria-hidden="true" href="#cb3-45" tabindex="-1"&gt;&lt;/a&gt;    oracle_clauses &lt;span class="op"&gt;=&lt;/span&gt; builder.clauses&lt;/span&gt;
&lt;span id="cb3-46"&gt;&lt;a aria-hidden="true" href="#cb3-46" tabindex="-1"&gt;&lt;/a&gt;    oracle_clauses.append([&lt;span class="op"&gt;-&lt;/span&gt;positive_satisfied])&lt;/span&gt;
&lt;span id="cb3-47"&gt;&lt;a aria-hidden="true" href="#cb3-47" tabindex="-1"&gt;&lt;/a&gt;    oracle_clauses.append([&lt;span class="op"&gt;-&lt;/span&gt;negative_satisfied])&lt;/span&gt;
&lt;span id="cb3-48"&gt;&lt;a aria-hidden="true" href="#cb3-48" tabindex="-1"&gt;&lt;/a&gt;    oracle &lt;span class="op"&gt;=&lt;/span&gt; Glucose4(oracle_clauses)&lt;/span&gt;
&lt;span id="cb3-49"&gt;&lt;a aria-hidden="true" href="#cb3-49" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-50"&gt;&lt;a aria-hidden="true" href="#cb3-50" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;while&lt;/span&gt; &lt;span class="va"&gt;True&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb3-51"&gt;&lt;a aria-hidden="true" href="#cb3-51" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# Every solution of our refined_clauses has a satisfying extension,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-52"&gt;&lt;a aria-hidden="true" href="#cb3-52" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# so we're done.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-53"&gt;&lt;a aria-hidden="true" href="#cb3-53" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; oracle.solve():&lt;/span&gt;
&lt;span id="cb3-54"&gt;&lt;a aria-hidden="true" href="#cb3-54" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;return&lt;/span&gt; refined_clauses&lt;/span&gt;
&lt;span id="cb3-55"&gt;&lt;a aria-hidden="true" href="#cb3-55" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-56"&gt;&lt;a aria-hidden="true" href="#cb3-56" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# We've got some solution to the refined clauses that cannot be extended.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-57"&gt;&lt;a aria-hidden="true" href="#cb3-57" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# Turn it into a set of assumptions that cannot be satisfied in the original&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-58"&gt;&lt;a aria-hidden="true" href="#cb3-58" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# SAT problem.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-59"&gt;&lt;a aria-hidden="true" href="#cb3-59" tabindex="-1"&gt;&lt;/a&gt;        counterexample &lt;span class="op"&gt;=&lt;/span&gt; oracle.get_model()&lt;/span&gt;
&lt;span id="cb3-60"&gt;&lt;a aria-hidden="true" href="#cb3-60" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; counterexample &lt;span class="kw"&gt;is&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; &lt;span class="va"&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-61"&gt;&lt;a aria-hidden="true" href="#cb3-61" tabindex="-1"&gt;&lt;/a&gt;        assumptions &lt;span class="op"&gt;=&lt;/span&gt; [&lt;/span&gt;
&lt;span id="cb3-62"&gt;&lt;a aria-hidden="true" href="#cb3-62" tabindex="-1"&gt;&lt;/a&gt;            literal &lt;span class="cf"&gt;for&lt;/span&gt; literal &lt;span class="kw"&gt;in&lt;/span&gt; counterexample &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="bu"&gt;abs&lt;/span&gt;(literal) &lt;span class="op"&gt;!=&lt;/span&gt; variable&lt;/span&gt;
&lt;span id="cb3-63"&gt;&lt;a aria-hidden="true" href="#cb3-63" tabindex="-1"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb3-64"&gt;&lt;a aria-hidden="true" href="#cb3-64" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-65"&gt;&lt;a aria-hidden="true" href="#cb3-65" tabindex="-1"&gt;&lt;/a&gt;        solved_assumptions &lt;span class="op"&gt;=&lt;/span&gt; solver.solve(assumptions&lt;span class="op"&gt;=&lt;/span&gt;assumptions)&lt;/span&gt;
&lt;span id="cb3-66"&gt;&lt;a aria-hidden="true" href="#cb3-66" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; solved_assumptions&lt;/span&gt;
&lt;span id="cb3-67"&gt;&lt;a aria-hidden="true" href="#cb3-67" tabindex="-1"&gt;&lt;/a&gt;        core &lt;span class="op"&gt;=&lt;/span&gt; solver.get_core()&lt;/span&gt;
&lt;span id="cb3-68"&gt;&lt;a aria-hidden="true" href="#cb3-68" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; core &lt;span class="kw"&gt;is&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; &lt;span class="va"&gt;None&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-69"&gt;&lt;a aria-hidden="true" href="#cb3-69" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-70"&gt;&lt;a aria-hidden="true" href="#cb3-70" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# We've learned a new clause that must always hold for the remaining variables.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-71"&gt;&lt;a aria-hidden="true" href="#cb3-71" tabindex="-1"&gt;&lt;/a&gt;        new_clause &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;tuple&lt;/span&gt;([&lt;span class="op"&gt;-&lt;/span&gt;literal &lt;span class="cf"&gt;for&lt;/span&gt; literal &lt;span class="kw"&gt;in&lt;/span&gt; core])&lt;/span&gt;
&lt;span id="cb3-72"&gt;&lt;a aria-hidden="true" href="#cb3-72" tabindex="-1"&gt;&lt;/a&gt;        refined_clauses.append(new_clause)&lt;/span&gt;
&lt;span id="cb3-73"&gt;&lt;a aria-hidden="true" href="#cb3-73" tabindex="-1"&gt;&lt;/a&gt;        oracle.add_clause(new_clause)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The idea here is that we use our oracle to find some assignment of
our current set of clauses over all the remaining variables that cannot
be satisfied, then use the original set of clauses to turn that into a
new learned clause. It’s not &lt;em&gt;exactly&lt;/em&gt; the same as the set
operations method, but it involves essentially the same ideas and
technologies.&lt;/p&gt;


&lt;p&gt;The downside of all of these methods is that they take two SAT calls
per added clause, and there’s no guarantee that they don’t add
exponentially many clauses. This isn’t just an “I can’t prove they
don’t” no guarantee - sometimes they actually do. For example, in the
context I was trying this, I found that most of the variables in my SAT
problem were easily removable by adding 10s of clauses, but some seemed
to run forever. This isn’t actually a problem for my use case for the
most part (because I can just skip the ones that take too long), but it
is a fairly fundamental limitation of the approach.&lt;/p&gt;


&lt;p&gt;I’m reasonably sure this is just intrinsic to the problem - you can
represent any boolean expression as CNF, but there’s no guarantee that
the CNF isn’t exponentially larger than the represented expression, so
where it is you’ll end up with exactly this sort of blow up.&lt;/p&gt;


&lt;p&gt;Anyway, like I said, I don’t know if this is a new idea. I’ve not
seen it before, and I think I would have if it was common knowledge, but
it’s totally possible I’ve just not read the right bits of the
literature to run into it.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-09-22-14:28.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-10-15-09:00.html</id>
    <title>“Fast” enumeration of partial assignments in SAT problems</title>
    <updated>2024-10-15T11:20:08+01:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;“Fast” enumeration of partial assignments in SAT problems&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-10-15&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;In &lt;a href="https://notebook.drmaciver.com/posts/2024-09-22-14:28.html"&gt;my
last post on SAT problems&lt;/a&gt; I noted that you can remove a single
variable from a SAT problem using the technique I outlined. That is, you
can build a SAT problem over the remaining variables that is solvable
iff there is some assignment of the removed variable that satisfies the
original problem.&lt;/p&gt;


&lt;p&gt;This will only sometimes run in reasonable time, because it runs in
one SAT solver call per clause you add, but most of the time&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;That is, for most but not all variables in a large SAT
problem.&lt;/span&gt; in my relatively limited experiments
that seems to be actually quite small.&lt;/p&gt;


&lt;p&gt;One open question I have is whether you can do better than removing
one variable at a time. In particular, if you have some very small
subset of the variables of a SAT problem, and you want to find the set
of clauses that those variables must satisfy to be extensible to an
assignment of the whole, removing one variable at a time ends up hugely
expensive.&lt;/p&gt;


&lt;p&gt;There is a fairly obvious brute force algorithm that you can use of
essentially enumerating all partial assignments up until the point where
you get a contradiction and adding the negations of the contradiction as
a clause. This will be worst-case exponential in the number of variables
in your subset.&lt;/p&gt;


&lt;p&gt;I suspect, but haven’t yet got an example that proves, that this is
actually essential and that it’s relatively easy to construct SAT
problems where exactly one assignment of the subset is not extensible to
the assignment of the whole, and this is in some way non-obvious. If so,
you might intrinsically need to check every possible assignment, which
is intrinsically exponential.&lt;/p&gt;


&lt;p&gt;Anyway this argument might be wrong, but I’ve still not figured out a
guaranteed better way to do this than brute force enumeration. But I
have figured out how to do the brute force enumeration
&lt;em&gt;faster&lt;/em&gt;.&lt;/p&gt;


&lt;p&gt;The core is the following function:&lt;/p&gt;


&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;from&lt;/span&gt; pysat.solvers &lt;span class="im"&gt;import&lt;/span&gt; Glucose4&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a aria-hidden="true" href="#cb1-2" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;import&lt;/span&gt; numpy &lt;span class="im"&gt;as&lt;/span&gt; np&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a aria-hidden="true" href="#cb1-3" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a aria-hidden="true" href="#cb1-4" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a aria-hidden="true" href="#cb1-5" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; refine_assignment_table(clauses, variables, table):&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a aria-hidden="true" href="#cb1-6" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Take a k x n table of assignments of n variables,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a aria-hidden="true" href="#cb1-7" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    and refine it so that it contains only satisfying assignments&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a aria-hidden="true" href="#cb1-8" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    of a set of SAT clauses, where a row in the table is interpreted&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a aria-hidden="true" href="#cb1-9" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    such that row[i] is the assigned value of variables[i]."""&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a aria-hidden="true" href="#cb1-10" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a aria-hidden="true" href="#cb1-11" tabindex="-1"&gt;&lt;/a&gt;    n &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(variables)&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a aria-hidden="true" href="#cb1-12" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;assert&lt;/span&gt; table.shape[&lt;span class="dv"&gt;1&lt;/span&gt;] &lt;span class="op"&gt;==&lt;/span&gt; n&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a aria-hidden="true" href="#cb1-13" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a aria-hidden="true" href="#cb1-14" tabindex="-1"&gt;&lt;/a&gt;    variables &lt;span class="op"&gt;=&lt;/span&gt; np.array(variables)&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a aria-hidden="true" href="#cb1-15" tabindex="-1"&gt;&lt;/a&gt;    variable_indexes &lt;span class="op"&gt;=&lt;/span&gt; {v: i &lt;span class="cf"&gt;for&lt;/span&gt; i, v &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;enumerate&lt;/span&gt;(variables)}&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a aria-hidden="true" href="#cb1-16" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a aria-hidden="true" href="#cb1-17" tabindex="-1"&gt;&lt;/a&gt;    sub_clauses &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a aria-hidden="true" href="#cb1-18" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-19"&gt;&lt;a aria-hidden="true" href="#cb1-19" tabindex="-1"&gt;&lt;/a&gt;    solver &lt;span class="op"&gt;=&lt;/span&gt; Glucose4(clauses)&lt;/span&gt;
&lt;span id="cb1-20"&gt;&lt;a aria-hidden="true" href="#cb1-20" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-21"&gt;&lt;a aria-hidden="true" href="#cb1-21" tabindex="-1"&gt;&lt;/a&gt;    i &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-22"&gt;&lt;a aria-hidden="true" href="#cb1-22" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;while&lt;/span&gt; i &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(table):&lt;/span&gt;
&lt;span id="cb1-23"&gt;&lt;a aria-hidden="true" href="#cb1-23" tabindex="-1"&gt;&lt;/a&gt;        row &lt;span class="op"&gt;=&lt;/span&gt; table[i]&lt;/span&gt;
&lt;span id="cb1-24"&gt;&lt;a aria-hidden="true" href="#cb1-24" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(row) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(variables)&lt;/span&gt;
&lt;span id="cb1-25"&gt;&lt;a aria-hidden="true" href="#cb1-25" tabindex="-1"&gt;&lt;/a&gt;        assignment &lt;span class="op"&gt;=&lt;/span&gt; [&lt;span class="bu"&gt;int&lt;/span&gt;(v &lt;span class="cf"&gt;if&lt;/span&gt; x &lt;span class="cf"&gt;else&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;v) &lt;span class="cf"&gt;for&lt;/span&gt; x, v &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="bu"&gt;zip&lt;/span&gt;(row, variables)]&lt;/span&gt;
&lt;span id="cb1-26"&gt;&lt;a aria-hidden="true" href="#cb1-26" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; solver.solve(assignment):&lt;/span&gt;
&lt;span id="cb1-27"&gt;&lt;a aria-hidden="true" href="#cb1-27" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="co"&gt;# This row is a valid assignment. Move on to the next one.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-28"&gt;&lt;a aria-hidden="true" href="#cb1-28" tabindex="-1"&gt;&lt;/a&gt;            i &lt;span class="op"&gt;+=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-29"&gt;&lt;a aria-hidden="true" href="#cb1-29" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;continue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-30"&gt;&lt;a aria-hidden="true" href="#cb1-30" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-31"&gt;&lt;a aria-hidden="true" href="#cb1-31" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# This row is an invalid assignment, so we can learn a new clause&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-32"&gt;&lt;a aria-hidden="true" href="#cb1-32" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# from it by extracting an unsatisfying core.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-33"&gt;&lt;a aria-hidden="true" href="#cb1-33" tabindex="-1"&gt;&lt;/a&gt;        clause &lt;span class="op"&gt;=&lt;/span&gt; [&lt;span class="op"&gt;-&lt;/span&gt;v &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; solver.get_core()]&lt;/span&gt;
&lt;span id="cb1-34"&gt;&lt;a aria-hidden="true" href="#cb1-34" tabindex="-1"&gt;&lt;/a&gt;        sub_clauses.append(clause)&lt;/span&gt;
&lt;span id="cb1-35"&gt;&lt;a aria-hidden="true" href="#cb1-35" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-36"&gt;&lt;a aria-hidden="true" href="#cb1-36" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# We now remove all rows that don't satisfy this clause. Note that&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-37"&gt;&lt;a aria-hidden="true" href="#cb1-37" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# all rows before this one must satisfy it as they are valid&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-38"&gt;&lt;a aria-hidden="true" href="#cb1-38" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# assignments.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-39"&gt;&lt;a aria-hidden="true" href="#cb1-39" tabindex="-1"&gt;&lt;/a&gt;        clause_mask &lt;span class="op"&gt;=&lt;/span&gt; np.array(clause)&lt;/span&gt;
&lt;span id="cb1-40"&gt;&lt;a aria-hidden="true" href="#cb1-40" tabindex="-1"&gt;&lt;/a&gt;        positive_mask &lt;span class="op"&gt;=&lt;/span&gt; np.zeros(n, dtype&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="bu"&gt;bool&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-41"&gt;&lt;a aria-hidden="true" href="#cb1-41" tabindex="-1"&gt;&lt;/a&gt;        negative_mask &lt;span class="op"&gt;=&lt;/span&gt; np.zeros(n, dtype&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="bu"&gt;bool&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-42"&gt;&lt;a aria-hidden="true" href="#cb1-42" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-43"&gt;&lt;a aria-hidden="true" href="#cb1-43" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;for&lt;/span&gt; v &lt;span class="kw"&gt;in&lt;/span&gt; clause:&lt;/span&gt;
&lt;span id="cb1-44"&gt;&lt;a aria-hidden="true" href="#cb1-44" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; v &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb1-45"&gt;&lt;a aria-hidden="true" href="#cb1-45" tabindex="-1"&gt;&lt;/a&gt;                positive_mask[variable_indexes[v]] &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-46"&gt;&lt;a aria-hidden="true" href="#cb1-46" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb1-47"&gt;&lt;a aria-hidden="true" href="#cb1-47" tabindex="-1"&gt;&lt;/a&gt;                negative_mask[variable_indexes[&lt;span class="op"&gt;-&lt;/span&gt;v]] &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-48"&gt;&lt;a aria-hidden="true" href="#cb1-48" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-49"&gt;&lt;a aria-hidden="true" href="#cb1-49" tabindex="-1"&gt;&lt;/a&gt;        positive_satisfaction &lt;span class="op"&gt;=&lt;/span&gt; table[:, positive_mask] &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="va"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-50"&gt;&lt;a aria-hidden="true" href="#cb1-50" tabindex="-1"&gt;&lt;/a&gt;        negative_satisfaction &lt;span class="op"&gt;=&lt;/span&gt; table[:, negative_mask] &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="va"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-51"&gt;&lt;a aria-hidden="true" href="#cb1-51" tabindex="-1"&gt;&lt;/a&gt;        satisfying &lt;span class="op"&gt;=&lt;/span&gt; np.&lt;span class="bu"&gt;any&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb1-52"&gt;&lt;a aria-hidden="true" href="#cb1-52" tabindex="-1"&gt;&lt;/a&gt;            np.concatenate(&lt;/span&gt;
&lt;span id="cb1-53"&gt;&lt;a aria-hidden="true" href="#cb1-53" tabindex="-1"&gt;&lt;/a&gt;                [positive_satisfaction, negative_satisfaction], axis&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-54"&gt;&lt;a aria-hidden="true" href="#cb1-54" tabindex="-1"&gt;&lt;/a&gt;            ),&lt;/span&gt;
&lt;span id="cb1-55"&gt;&lt;a aria-hidden="true" href="#cb1-55" tabindex="-1"&gt;&lt;/a&gt;            axis&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;/span&gt;
&lt;span id="cb1-56"&gt;&lt;a aria-hidden="true" href="#cb1-56" tabindex="-1"&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id="cb1-57"&gt;&lt;a aria-hidden="true" href="#cb1-57" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;assert&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(satisfying) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(table)&lt;/span&gt;
&lt;span id="cb1-58"&gt;&lt;a aria-hidden="true" href="#cb1-58" tabindex="-1"&gt;&lt;/a&gt;        table &lt;span class="op"&gt;=&lt;/span&gt; table[satisfying]&lt;/span&gt;
&lt;span id="cb1-59"&gt;&lt;a aria-hidden="true" href="#cb1-59" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; sub_clauses, table&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes some table of assignments of the set of variables and
refines it until it contains only valid assignments, learning a set of
clauses along the way required to achieve that subset. This allows us to
fairly rapidly filter out any unsatisfying assignments, so that when the
set of valid assignments is small we should typically run in a much
smaller number of SAT calls. Even in an absolute worst case scenario
(where every core is the length of the whole set of variables) this does
no worse than a more direct brute force enumeration.&lt;/p&gt;


&lt;p&gt;The big advantage of this over previous attempts I’ve made at doing
it via direct enumeration is that it’s not in any way sensitive to
variable ordering. If you’re attempting the obvious recursive bit and
you find a new clause, you’ve now got to figure out how to propagate
that clause up and back down the recursion. Having everything in a
single table of assignments means this is handled automatically for
you.&lt;/p&gt;


&lt;p&gt;We can then just run this on a table consisting of the set of all
possible assignments of the variables, but we can do slightly better
than that by breaking the variables up as follows:&lt;/p&gt;


&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb2-1"&gt;&lt;a aria-hidden="true" href="#cb2-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; enumerate_subsets(n):&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a aria-hidden="true" href="#cb2-2" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Returns a 2^n x n table of all possible subsets of {0, ..., n - 1}"""&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a aria-hidden="true" href="#cb2-3" tabindex="-1"&gt;&lt;/a&gt;    numbers &lt;span class="op"&gt;=&lt;/span&gt; np.arange(&lt;span class="dv"&gt;2&lt;/span&gt;&lt;span class="op"&gt;**&lt;/span&gt;n, dtype&lt;span class="op"&gt;=&lt;/span&gt;np.uint32)[:, np.newaxis]&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a aria-hidden="true" href="#cb2-4" tabindex="-1"&gt;&lt;/a&gt;    powers_of_two &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;**&lt;/span&gt; np.arange(n, dtype&lt;span class="op"&gt;=&lt;/span&gt;np.uint32)&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a aria-hidden="true" href="#cb2-5" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; (numbers &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; powers_of_two) &lt;span class="op"&gt;!=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a aria-hidden="true" href="#cb2-6" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a aria-hidden="true" href="#cb2-7" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a aria-hidden="true" href="#cb2-8" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; concatenate_matrix_rows(matrix1, matrix2):&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a aria-hidden="true" href="#cb2-9" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Return a matrix containing every concatenation of a row&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a aria-hidden="true" href="#cb2-10" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    from each of its two source matrices."""&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a aria-hidden="true" href="#cb2-11" tabindex="-1"&gt;&lt;/a&gt;    m, n &lt;span class="op"&gt;=&lt;/span&gt; matrix1.shape&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a aria-hidden="true" href="#cb2-12" tabindex="-1"&gt;&lt;/a&gt;    j, k &lt;span class="op"&gt;=&lt;/span&gt; matrix2.shape&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a aria-hidden="true" href="#cb2-13" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a aria-hidden="true" href="#cb2-14" tabindex="-1"&gt;&lt;/a&gt;    reshaped1 &lt;span class="op"&gt;=&lt;/span&gt; matrix1.reshape(m, &lt;span class="dv"&gt;1&lt;/span&gt;, n).repeat(j, axis&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a aria-hidden="true" href="#cb2-15" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a aria-hidden="true" href="#cb2-16" tabindex="-1"&gt;&lt;/a&gt;    reshaped2 &lt;span class="op"&gt;=&lt;/span&gt; matrix2.reshape(&lt;span class="dv"&gt;1&lt;/span&gt;, j, k).repeat(m, axis&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a aria-hidden="true" href="#cb2-17" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a aria-hidden="true" href="#cb2-18" tabindex="-1"&gt;&lt;/a&gt;    result &lt;span class="op"&gt;=&lt;/span&gt; np.concatenate([reshaped1, reshaped2], axis&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="dv"&gt;2&lt;/span&gt;).reshape(&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a aria-hidden="true" href="#cb2-19" tabindex="-1"&gt;&lt;/a&gt;        m &lt;span class="op"&gt;*&lt;/span&gt; j, n &lt;span class="op"&gt;+&lt;/span&gt; k&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a aria-hidden="true" href="#cb2-20" tabindex="-1"&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a aria-hidden="true" href="#cb2-21" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a aria-hidden="true" href="#cb2-22" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; result&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a aria-hidden="true" href="#cb2-23" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a aria-hidden="true" href="#cb2-24" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a aria-hidden="true" href="#cb2-25" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; assignment_table_and_clauses(clauses, variables):&lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a aria-hidden="true" href="#cb2-26" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Returns a set of sub-clauses over `variables` such that&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a aria-hidden="true" href="#cb2-27" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    an assignment of variables can be extended to an assignment&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a aria-hidden="true" href="#cb2-28" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    for the whole set of clauses iff it satisfies those subclauses,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a aria-hidden="true" href="#cb2-29" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    together with an assignment table representing all valid assignments&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-30"&gt;&lt;a aria-hidden="true" href="#cb2-30" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    of the variables."""&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-31"&gt;&lt;a aria-hidden="true" href="#cb2-31" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-32"&gt;&lt;a aria-hidden="true" href="#cb2-32" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(variables) &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="dv"&gt;8&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb2-33"&gt;&lt;a aria-hidden="true" href="#cb2-33" tabindex="-1"&gt;&lt;/a&gt;        sub_clauses &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb2-34"&gt;&lt;a aria-hidden="true" href="#cb2-34" tabindex="-1"&gt;&lt;/a&gt;        table &lt;span class="op"&gt;=&lt;/span&gt; enumerate_subsets(&lt;span class="bu"&gt;len&lt;/span&gt;(variables))&lt;/span&gt;
&lt;span id="cb2-35"&gt;&lt;a aria-hidden="true" href="#cb2-35" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb2-36"&gt;&lt;a aria-hidden="true" href="#cb2-36" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# Solve the problem for two halves of the variables and then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-37"&gt;&lt;a aria-hidden="true" href="#cb2-37" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# merge the tables. NB: If we had a reliable heuristic for&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-38"&gt;&lt;a aria-hidden="true" href="#cb2-38" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# grouping variables together that have a lot of influence&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-39"&gt;&lt;a aria-hidden="true" href="#cb2-39" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# on each other we should probably use it here. e.g. it probably&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-40"&gt;&lt;a aria-hidden="true" href="#cb2-40" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# makes sense to group variables in the same clause together.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-41"&gt;&lt;a aria-hidden="true" href="#cb2-41" tabindex="-1"&gt;&lt;/a&gt;        split &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(variables) &lt;span class="op"&gt;//&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-42"&gt;&lt;a aria-hidden="true" href="#cb2-42" tabindex="-1"&gt;&lt;/a&gt;        sub_clauses_left, table_left &lt;span class="op"&gt;=&lt;/span&gt; assignment_table_and_clauses(&lt;/span&gt;
&lt;span id="cb2-43"&gt;&lt;a aria-hidden="true" href="#cb2-43" tabindex="-1"&gt;&lt;/a&gt;            clauses, variables[:split]&lt;/span&gt;
&lt;span id="cb2-44"&gt;&lt;a aria-hidden="true" href="#cb2-44" tabindex="-1"&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id="cb2-45"&gt;&lt;a aria-hidden="true" href="#cb2-45" tabindex="-1"&gt;&lt;/a&gt;        sub_clauses_right, table_right &lt;span class="op"&gt;=&lt;/span&gt; assignment_table_and_clauses(&lt;/span&gt;
&lt;span id="cb2-46"&gt;&lt;a aria-hidden="true" href="#cb2-46" tabindex="-1"&gt;&lt;/a&gt;            clauses, variables[split:]&lt;/span&gt;
&lt;span id="cb2-47"&gt;&lt;a aria-hidden="true" href="#cb2-47" tabindex="-1"&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id="cb2-48"&gt;&lt;a aria-hidden="true" href="#cb2-48" tabindex="-1"&gt;&lt;/a&gt;        sub_clauses &lt;span class="op"&gt;=&lt;/span&gt; cub_clauses_left &lt;span class="op"&gt;+&lt;/span&gt; sub_clauses_right&lt;/span&gt;
&lt;span id="cb2-49"&gt;&lt;a aria-hidden="true" href="#cb2-49" tabindex="-1"&gt;&lt;/a&gt;        table &lt;span class="op"&gt;=&lt;/span&gt; concatenate_matrix_rows(table_left, table_right)&lt;/span&gt;
&lt;span id="cb2-50"&gt;&lt;a aria-hidden="true" href="#cb2-50" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-51"&gt;&lt;a aria-hidden="true" href="#cb2-51" tabindex="-1"&gt;&lt;/a&gt;    new_clauses, table &lt;span class="op"&gt;=&lt;/span&gt; refine_assignment_table(clauses, variables, table)&lt;/span&gt;
&lt;span id="cb2-52"&gt;&lt;a aria-hidden="true" href="#cb2-52" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; sub_clauses &lt;span class="op"&gt;+&lt;/span&gt; new_clauses, table&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When there are subsets of the variables that also have fairly
restricted assignments, working out their possible assignments first
means that you can do a little better than exponential. If those subsets
end up being mostly unconstrained you at least don’t do worse.&lt;/p&gt;


&lt;p&gt;Now, obviously this is all still exponential in the worst case, and
the worst case is actually pretty common, but it’s fast enough that it
significantly improves what I thought was the number of variables that
it was reasonable to expect this sort of thing to work on - in my
current experiments it seems to work pretty well with sets of up to
about 16-20 variables (16 is fast, 20 is tractable) in a SAT problem of
high hundreds of variables. This isn’t huge, but it’s still a useful
boundary to have pushed up a bit.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-10-15-09:00.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2024-12-03-12:01.html</id>
    <title>Filtered sampling from sorted values with incremental binary search</title>
    <updated>2024-12-03T13:19:13+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;Filtered sampling from sorted values with incremental binary search&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2024-12-03&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;I had a problem recently that I solved badly. As is traditional, I
figured out how to solve it well in the shower this morning. The
solution is obvious in retrospect, but I thought I’d share it anyway as
it’s an interesting algorithm that I’d not seen before.&lt;/p&gt;


&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; filtered_sample(random, values, lower_bound, upper_bound):&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a aria-hidden="true" href="#cb1-2" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;"""Samples a random value `x` from `values`, which must be a sorted list,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a aria-hidden="true" href="#cb1-3" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    such that lower_bound &amp;lt;= x &amp;lt;= upper_bound, or raises ValueError if there are no such values.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a aria-hidden="true" href="#cb1-4" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    """&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a aria-hidden="true" href="#cb1-5" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# Invariant: If 0 &amp;lt;= i &amp;lt; lo then values[i] &amp;lt; lower_bound&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a aria-hidden="true" href="#cb1-6" tabindex="-1"&gt;&lt;/a&gt;    lo &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a aria-hidden="true" href="#cb1-7" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# Invariant: If hi &amp;lt;= i &amp;lt; len(values) then values[i] &amp;gt; upper_bound&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a aria-hidden="true" href="#cb1-8" tabindex="-1"&gt;&lt;/a&gt;    hi &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="bu"&gt;len&lt;/span&gt;(values)&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a aria-hidden="true" href="#cb1-9" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;while&lt;/span&gt; lo &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; hi:&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a aria-hidden="true" href="#cb1-10" tabindex="-1"&gt;&lt;/a&gt;        i &lt;span class="op"&gt;=&lt;/span&gt; random.randrange(lo, hi)&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a aria-hidden="true" href="#cb1-11" tabindex="-1"&gt;&lt;/a&gt;        x &lt;span class="op"&gt;=&lt;/span&gt; values[i]&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a aria-hidden="true" href="#cb1-12" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;if&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; lower_bound:&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a aria-hidden="true" href="#cb1-13" tabindex="-1"&gt;&lt;/a&gt;            lo &lt;span class="op"&gt;=&lt;/span&gt; i &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a aria-hidden="true" href="#cb1-14" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;elif&lt;/span&gt; x &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; upper_bound:&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a aria-hidden="true" href="#cb1-15" tabindex="-1"&gt;&lt;/a&gt;            hi &lt;span class="op"&gt;=&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a aria-hidden="true" href="#cb1-16" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a aria-hidden="true" href="#cb1-17" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;return&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a aria-hidden="true" href="#cb1-18" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;raise&lt;/span&gt; &lt;span class="pp"&gt;ValueError&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb1-19"&gt;&lt;a aria-hidden="true" href="#cb1-19" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="ss"&gt;f"`values` does not contain any elements between &lt;/span&gt;&lt;span class="sc"&gt;{&lt;/span&gt;lower_bound&lt;span class="sc"&gt;}&lt;/span&gt;&lt;span class="ss"&gt; and &lt;/span&gt;&lt;span class="sc"&gt;{&lt;/span&gt;upper_bound&lt;span class="sc"&gt;}&lt;/span&gt;&lt;span class="ss"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-20"&gt;&lt;a aria-hidden="true" href="#cb1-20" tabindex="-1"&gt;&lt;/a&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a nice example algorithm that varies smoothly between two
slightly more obvious algorithms:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;Rejection sampling (just sample until you get a value in the right
range)&lt;/li&gt;
&lt;li&gt;Always do a binary search to find the bounds, and then random sample
within that range.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Rejection sampling is the best when almost all of the values are in
range. Binary search is best when few or none are (in particular the
first cannot easily detect it. There are ways to mitigate that
though)&lt;/p&gt;


&lt;p&gt;My initial implementation did one round of rejection sampling and
then the binary search, which is a sort of awkward compromise. The way
the new algorithm works is essentially doing only as much of the binary
search as you need. If a sample gives you a suitable value now, you can
stop and return that. If it doesn’t, you’ve effectively chosen a
midpoint in your binary search and can update the bounds for the next
round of the sample.&lt;/p&gt;


&lt;p&gt;The first algorithm basically only works as well as whichever is
better of the first two, while the new algorithm smoothly varies between
the two extremes. I believe (but haven’t checked the details) that it
runs in &lt;code&gt;O(log(n / (k + 1))&lt;/code&gt; where &lt;code&gt;k&lt;/code&gt; is the
number of elements in the array satisfying the condition.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2024-12-03-12:01.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2025-02-08-09:26.html</id>
    <title>How do LLMs work?</title>
    <updated>2025-02-10T11:18:24+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;How do LLMs work?&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2025-02-08&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;Someone asked me to explain how LLMs work to them without metaphors.
This is my attempt.&lt;/p&gt;


&lt;p&gt;Specifically, this is an attempt to explain what LLMs do and what the
various parts of the pipeline look like. There are a lot of extremely
technical internal details that you’re not going to understand without a
lot more maths and engineering background. Much of them &lt;em&gt;I&lt;/em&gt; don’t
understand. Think of this as an explanation at the level of “A car has
an engine. The engine makes the car go. It does this by burning fuel and
spinning a crank”. If you want to know how engines work, talk to a
better mechanic than me.&lt;/p&gt;


&lt;h3 id="the-parts-of-a-chatbot"&gt;The parts of a chatbot&lt;/h3&gt;


&lt;p&gt;I think part of the reason LLMs are confusing is that you don’t
actually interact with an LLM. You interact with &lt;em&gt;a piece of software
built on top of an LLM&lt;/em&gt;. The software is often a pretty thin layer,
so this may seem like a bit of a distinction without a difference, but I
think it leads to a misleading idea of what the LLM actually does,
especially with regards to training.&lt;/p&gt;


&lt;p&gt;Roughly speaking,&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;There are a bunch of other things going on too. For
example there’s likely a variety of classifiers running as an extra
layer to detect harmful output - whenever ChatGPT tells you a message
violates its content policies for example, that’s some other layer
having decided that the LLM output is inappropriate in some way. But the
three layers I describe are enough to create something very like what
you experience when talking to an LLM.&lt;/span&gt; you can think of something like
Claude or ChatGPT as consisting of three layers:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;A &lt;strong&gt;chatbot&lt;/strong&gt; - the bit you actually talk to.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;completion engine&lt;/strong&gt; - this is a piece of software
that takes some text and continues it in some way. e.g. If you give it
the text “The quick brown fox” it might complete it by adding “jumps
over the lazy dog” or by adding “is a bit of a good idea”&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This is what Android’s autocomplete suggests for that
start.&lt;/span&gt;.
When people talk about LLMs “just being fancy autocomplete”, this is the
layer they mean, and they’re right but that “just” is doing a lot of
work. It’s &lt;em&gt;very&lt;/em&gt; fancy autocomplete.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;language model&lt;/strong&gt; - this is a piece of software
which, given a bit of text, gives you a set of possible completions to
that text, with probabilities for each one. You don’t really need to
understand probability to know how to interpret this.&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Though if you want to, &lt;a href="https://notebook.drmaciver.com/posts/2021-10-29-09:43.html"&gt;I’ve
got this other piece right here&lt;/a&gt;&lt;/span&gt;.
All “probability” means is that the numbers are between 0 and 1 and add
up to 1. For example, with our start of “The quick brown fox”, an LLM
might say that you could continue this with “jumps over the lazy dog”
with probability 90% and “is a bit of a good idea” with probability
10%.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All of the magic happens in making the language model, and how good a
chat bot you get depends entirely on the quality of the underlying
language model. All of the big innovations of the last couple of years
have been in learning to build much better language models than we’ve
historically had, and part of the key to that is in the word “large” in
“large language model”. The language models we’re building are just much
large than ones we used to build - ones at the smallest end are still a
couple of gigabytes. This is partly because we’ve got hardware that can
handle that, and partly because we’ve figured out how to put that size
to good work. Exactly how we’ve done that… I don’t plan to tell you in
much detail. Clever computer science and big computers. But I will tell
you a bit about what goes into making them shortly.&lt;/p&gt;


&lt;h3 id="building-a-completion-engine"&gt;Building a completion engine&lt;/h3&gt;


&lt;p&gt;So we’ve got our language model. It takes text, and it gives us a set
of continuation probabilities.&lt;/p&gt;


&lt;p&gt;First, we need to build a completion engine.&lt;/p&gt;


&lt;p&gt;The way you build a completion engine out of a language model is you
write a program that takes text and feeds it to a large language model,
which gives you back some continuations of that text with probabilities.
You then pick any one of those continuations for which the probability
is greater than zero.&lt;/p&gt;


&lt;p&gt;There are two natural choices:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;You can pick the one with the highest probability (picking
arbitrarily if there are ties)&lt;/li&gt;
&lt;li&gt;You can pick one at random with the provided probabilities. So
e.g. with the above probabilities 90% of the time we’d continue with
“jumps over the lazy dog” and 10% of the time we’d pick “is a bit of a
good idea”.&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Try not to get too bogged down in what this means. If it
helps, imagine rolling a 100-sided fair die and picking the first on a
roll of 1-90 and a the second on a roll of 91-100.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you’ve heard of a “temperature” parameter, the first is what we
mean by “temperature 0” and the latter is what we mean by “temperature
1”. A temperature between the two means that we pick randomly but we
skew the choices so that we’re more likely to pick a number with high
probability than the base probabilities suggest.&lt;label class="margin-toggle sidenote-number" for="fn5"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn5" type="checkbox"/&gt;&lt;span class="sidenote"&gt;e.g. if we have a temperature of 0.1 we might pick
“jumps over the lazy dog” with probability more like 99%. We would still
sometimes generate the less probable option, but more rarely.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;Typically, you will want to do this more than once, until some
condition is fulfilled, feeding the text plus your previous completion
back into the completion engine. For example, to get the “is a bit of a
good idea” completion I repeatedly asked the Google autocomplete for one
word at a time until I was bored, so I actually got the following series
of completions:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;“The quick brown fox” -&amp;gt; ” is”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is” -&amp;gt; ” a”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is a” -&amp;gt; ” bit”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is a bit” -&amp;gt; ” of”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is a bit of” -&amp;gt; ” a”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is a bit of a” -&amp;gt; ” good”&lt;/li&gt;
&lt;li&gt;“The quick brown fox is a bit of a good” -&amp;gt; ” idea”&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In a program, rather than stopping when you get bored, you will
usually feed the text you generated from the language model back into
itself until either you hit some length limit or the completion returned
contains some piece of text that indicates you should stop
completing.&lt;/p&gt;


&lt;h3 id="building-a-chatbot"&gt;Building a chatbot&lt;/h3&gt;


&lt;p&gt;Now that you’ve got a completion engine, you build a chatbot by
basically having the completion engine and the human coauthor a
transcript together.&lt;/p&gt;


&lt;p&gt;For example, suppose I start a conversation with “Hi Claude. What’s
the capital of France?”, the chatbot software will generate the
following text:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Human: Hi Claude. What’s the capital of France?&lt;/p&gt;
&lt;p&gt;Assistant:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;Which indicates that in this transcript it’s now the assistant’s turn
to speak. The completion engine then continues writing this transcript,
completing it to the following:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Human: Hi Claude. What’s the capital of France?&lt;/p&gt;
&lt;p&gt;Assistant: Paris is the capital of France.&lt;/p&gt;
&lt;p&gt;Human:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;With the “Human:” bit now indicating that it’s up for the human to
continue the transcript, and the chatbot software now letting you type
your next response.&lt;label class="margin-toggle sidenote-number" for="fn6"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn6" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Side note: This description is somewhat Claude specific.
I think ChatGPT works the same way. Many of the open source models use a
different format. The same basic idea applies though.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;You can see this play out in funny ways:&lt;/p&gt;


&lt;p&gt;&lt;img src="/images/confusedclaude.png"/&gt;&lt;/p&gt;


&lt;p&gt;What’s happening here is that every time Claude tries to explain the
transcript format to me, it does so by writing “Human:” at the start of
the line. This causes the chatbot part of the software to go “Ah, a line
starting with ‘Human:’. Time to hand back over to the human.” and
interrupt Claude before it can finish what it’s writing.&lt;/p&gt;


&lt;p&gt;This is a bit of a digression, but I like this sort of abstraction
leaking.&lt;/p&gt;


&lt;p&gt;The main thing I want to get across here though is that when you are
interacting with a chatbot you are not “talking to the LLM” (or even to
the completion engine). You are talking to “Assistant”, a character that
the completion engine is writing.&lt;/p&gt;


&lt;p&gt;One way to see this in action is that the completion engine will also
just as happily write the “Human:” parts of the transcript if you let
it. A while back I was writing some evaluations to test an LLM
capability, and accidentally screwed up the code that would stop it from
continuing the completion when it had written “Human:”. What happened
was a transcript that looked roughly like the following&lt;label class="margin-toggle sidenote-number" for="fn7"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn7" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This is a made up example and not the actual evaluation
I was running.&lt;/span&gt;&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Human: What is the capital of France?&lt;/p&gt;
&lt;p&gt;Assistant: The capital of France is Paris.&lt;/p&gt;
&lt;p&gt;Human: That’s correct! Thank you for being such a helpful assistant.
What’s the capital of Germany?&lt;/p&gt;
&lt;p&gt;Assistant: The capital of Germany is Berlin.&lt;/p&gt;
&lt;p&gt;Human: Correct again. You’re such a good assistant. Good job.&lt;label class="margin-toggle sidenote-number" for="fn8"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn8" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I’m exaggerating a little but this was genuinely the
tone of the human side of the conversations, repeatedly praising the LLM
for being such a good assistant. It was very funny.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(this goes on for a while)&lt;/p&gt;
&lt;p&gt;Human: OK that’s enough questions for now. Thank you for your
assistance today.&lt;/p&gt;
&lt;p&gt;Assistant: You’re very welcome!&lt;/p&gt;
&lt;p&gt;Human: OK bye now.&lt;/p&gt;
&lt;p&gt;Assistant: Goodbye&lt;/p&gt;
&lt;p&gt;Human: OK I’m leaving.&lt;/p&gt;
&lt;p&gt;Assistant: It is probably time to end this conversation yes.&lt;/p&gt;
&lt;p&gt;Human: Goodbye&lt;/p&gt;
&lt;p&gt;Assistant: Goodbye&lt;/p&gt;
&lt;p&gt;Human: Bye now.&lt;/p&gt;
&lt;p&gt;(this goes on for a while until it hit the length limit)&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;In theory you could get it to write any other characters you wanted
in this transcript too, but the language models we use are typically
optimised for this human and assistant dialogue.&lt;/p&gt;


&lt;h3 id="building-a-language-model"&gt;Building a language model&lt;/h3&gt;


&lt;p&gt;Now we get to the hard part, building a language model. Or, rather,
building a language model is easy, building one good enough to be worth
using in this way is hard.&lt;/p&gt;


&lt;p&gt;We’re not going to cover how to build one good enough, but we will
see how you could build a bad one, and where the hard technical details
of building a better one will slot in.&lt;/p&gt;


&lt;p&gt;First, a note: A language model typically operates on
&lt;em&gt;tokens&lt;/em&gt;. A token is basically a small chunk of text. A token
might be a single letter, or a whole word, or even several words. Often
what you want is for common pieces of text to have a dedicated token.
For example, it might be reasonable to represent “Human:” and
“Assistant:” as their own single tokens.&lt;label class="margin-toggle sidenote-number" for="fn9"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn9" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I think this is not in fact typically done and they’re
short sequences of tokens, but I’m not sure about this.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;For the purposes of ease of explanation I’m going to ignore this and
talk about language models that are operating on single characters, so
the goal of the model at any given point is to give you a set of
characters that might come next in the sequence and probabilities for
that. So for example you might give it the text “Th” and it might return
that “e” has probability 80% as the next character, “a” has 15%, …., “z”
has 0.01%, etc. &lt;label class="margin-toggle sidenote-number" for="fn10"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn10" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that these probabilities are not in any sense the
“true” probabilities of the next character. They’re some completely
arbitrary numbers given to you by the language model. They can be better
or worse for some purpose, but they’re not right or wrong, they’re
simply the numbers the model gives you.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;Let’s consider the simplest possible class of language model, which
completely ignores the text you give it and just gives you the same
character probabilities each time. Even that has some variation.&lt;/p&gt;


&lt;p&gt;Here are two completions (starting from an empty text) from two
different examples of such a model.&lt;/p&gt;


&lt;p&gt;The first:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;[9sV7tWP3iÇqëT#S’o56fRIgi N3-hVg,œ5:CA :Pp’%4DM&lt;span class="math inline"&gt;\(™b%H;  %\)&lt;/span&gt;Æ‘g4YOdee85IqzÀq1X55wàHœR‘Æ—_&amp;amp;jOaçbv%;sBJL”k&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;and the second:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;dt ,gsadeaohti yee Pauml th ooid hso&lt;/p&gt;
&lt;p&gt;,;lt .rec arsn . ae&lt;/p&gt;
&lt;p&gt;,khe tIr’Tpym rHil aim em&lt;/p&gt;
&lt;p&gt;n wt&lt;/p&gt;
&lt;p&gt;m,ssou&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the first, each of the characters it knows about is given equal
probabilty. In the second, the probabilities are matched to how often
the characters appear in the complete works of Shakespeare. Despite
this, the second example is decidedly &lt;em&gt;not&lt;/em&gt; Shakespeare, but it
looks a little bit less like Gibberish than the first does.&lt;/p&gt;


&lt;p&gt;These two models have the same structure, which is that we’ve got a
single number for each character (of which we have 107, all the ones
that appear in the complete works of Shakespeare I have), which
determines the probabilities. In the first, each has a probability of
&lt;span class="math inline"&gt;\(\frac{1}{107}\)&lt;/span&gt;. In the second,
e.g. ‘e’ has a probability of 8.4%, and ‘Q’ has a probability of 0.02%&lt;label class="margin-toggle sidenote-number" for="fn11"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn11" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that these are case sensitive. “E” has a
probability of 0.6% and “q” 0.05%. Capital letters are just less common
than lower case ones.&lt;/span&gt; These numbers that determine the
specific behaviour of the model once we know its structure are called
&lt;em&gt;parameters&lt;/em&gt; or &lt;em&gt;weights&lt;/em&gt;&lt;label class="margin-toggle sidenote-number" for="fn12"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn12" type="checkbox"/&gt;&lt;span class="sidenote"&gt;I think the distinction people mean here is that the
weights are a specific set of numbers that the parameters corresponding
to a given structure take in a particular language model. So e.g. “the
probability of ‘e’” is a parameter, and it has weight 8.4% here. I’m not
actually sure this distinction is reliably held to in normal usage
though.&lt;/span&gt;,
and training a large language model consists entirely of picking the
weights for a fixed structure.&lt;label class="margin-toggle sidenote-number" for="fn13"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn13" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that in general weights are not just
probabilities, and are any numbers that might go into computing those
final probabilities. There will often be intermediate values in the
calculuation that don’t have any straightforward interpretation as a
probability of a particular token. e.g. you might have a weight that
represents the probability that the text is in French, or one that is
how much preference to give to asking questions. Most weights will end
up being much less straightforwardly interpretable than this.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;To give you a brief idea of how much the structure matters, let’s
consider the second simplest type of language model, which is a type of
what’s called a Markov chain.&lt;label class="margin-toggle sidenote-number" for="fn14"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn14" type="checkbox"/&gt;&lt;span class="sidenote"&gt;In a certain sense, an LLM is actually still a Markov
chain, but it’s a Markov chain in much the same way that it’s fancy
autocompletion.&lt;/span&gt; We look at only the
last character of the text to determine the likelihood of the next
character. Here’s a sample from a completion engine using such a
language model:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Ay, s Allomel cobeinonlat ant cod. Wer a s d NTr’s heee mee at,
OLSire hthe w theind ha CHestisthoo&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;Again, it’s not exactly Shakespeare, but it’s &lt;em&gt;less&lt;/em&gt; not
exactly Shakespeare than either of the previous examples. Adding more
ability to look at the text that it’s given gives you the ability to
produce something that looks more and more like coherent text. You can
extend this idea further, letting it look at more characters at a time,
and eventually you get something that starts to look almost like
coherent English until you try to actually make sense of its
meaning.&lt;/p&gt;


&lt;p&gt;For context, &lt;a href="https://github.com/shreydan/shakespeareGPT/blob/main/saved/v2/generated.txt"&gt;here’s
some output from (someone else’s) toy LLM trained on
Shakespeare&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;And, do remember, in the ungracious of war.&lt;/p&gt;
&lt;p&gt;Hear’s my tent&lt;/p&gt;
&lt;p&gt;And see me that crystal’s death, Tranio, he affections of love
you.&lt;/p&gt;
&lt;p&gt;GLOUCESTER:&lt;/p&gt;
&lt;p&gt;YORK:&lt;/p&gt;
&lt;p&gt;GLOUCESTER:&lt;/p&gt;
&lt;p&gt;In God the curtain are you, this wilful Chertsey monastery a puissant
stoop’d me.&lt;/p&gt;
&lt;p&gt;GLOUCESTER:&lt;/p&gt;
&lt;p&gt;And then, my lord, we were ‘shall’?&lt;/p&gt;
&lt;p&gt;KING HENRY VI: widow’d from his foe surprised at once, being so:&lt;/p&gt;
&lt;p&gt;As heavy&lt;/p&gt;
&lt;p&gt;I am subtle&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;It &lt;em&gt;still&lt;/em&gt; doesn’t make sense, but with each improvement in
the complexity of a model its ability to sound almost like it knows what
its talking about improves.&lt;/p&gt;


&lt;p&gt;One key thing to note in going from the simpler version to the
complicated version is that there are now a lot more parameters. Our
previous model that just gave every character equal a probability
independently of what came before it has 107 parameters - one for each
possible character in the text - while our slightly better one that uses
the last previous character has 11449 parameters - one for each pair of
characters (e.g. the probability of a ‘t’ coming after a ‘c’). This
holds in general: The more able to represent language your language
model is, the more parameters you should expect it to have. When people
are talking about model sizes, they mean the number of paramters. &lt;a href="https://en.wikipedia.org/wiki/GPT-4"&gt;Wikipedia says&lt;/a&gt; that GPT-4
probably has about 1.76 trillion parameters.&lt;/p&gt;


&lt;p&gt;Getting the structure of your language model right is essential for
making sure it can actually represent language well enough to do the job
you want it to, but whether it actually does that all comes down to
whether the weights have the right value. The third example is only
better than the second because of the particular choice of weights! I
could just as easily have set it so that the probabilities were all
equal and we’d have got something as bad as the first example.&lt;/p&gt;


&lt;p&gt;So, once you’ve got the structure of your language model, you need to
figure out the right weights to give it. That’s where training comes
in.&lt;/p&gt;


&lt;h3 id="how-to-train-a-language-model"&gt;How to train a language
model&lt;/h3&gt;


&lt;p&gt;So you’ve got a language model and you want to give it a good set of
weights. How? Training!&lt;/p&gt;


&lt;p&gt;Except, “training” is something of a misleading metaphor. You’re not
really taking a language model and teaching it anything, you’re taking a
language model and creating a new language model more suited to your
needs. “Training” is what we call that though. It’s also called
“reinforcement learning”.&lt;label class="margin-toggle sidenote-number" for="fn15"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn15" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This technically means something more specific, but
don’t worry about it.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;We do this by defining what’s called a &lt;em&gt;loss function&lt;/em&gt;. This
is some program that takes a language model and gives it a score. You
want to create a language model with as low a score as possible.&lt;label class="margin-toggle sidenote-number" for="fn16"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn16" type="checkbox"/&gt;&lt;span class="sidenote"&gt;e.g. a loss function could be a measure of how many
mistakes it makes.&lt;/span&gt; The process we use is what’s called
&lt;em&gt;gradient descent&lt;/em&gt;. This is a very conceptually straightforward
process&lt;label class="margin-toggle sidenote-number" for="fn17"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn17" type="checkbox"/&gt;&lt;span class="sidenote"&gt;with a huge amount of technical detail to make work
well enough&lt;/span&gt;, which basically consists of taking
your current weights, and finding a very small adjustment to them that
descreases the loss function slightly.&lt;label class="margin-toggle sidenote-number" for="fn18"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn18" type="checkbox"/&gt;&lt;span class="sidenote"&gt;How to actually find that is a little bit technical.
You can imagine trying lots of small variations and seeing if any of
them work, but usually it’s possible to do better than that. Getting
this step fast is one of the big things that we’ve needed to develop a
lot of robust technology in order to make progress in this field.&lt;/span&gt;
You replace your weights with those modified ones, and keep going, You
do this for as long as you want, stopping when you can’t find any way to
improve the loss function or, more likely, you’ve exceeded your budget
for computer time. When training a model, you start from some previous
model that you got from your last training run, or if you don’t have one
you just set all of its weights to arbitrary values (typically random),
and then you use gradient descent to improve it.&lt;/p&gt;


&lt;p&gt;A large language model is trained in two stages. Funnily, these are
called “pre-training” and “post-training”, with no training stage. These
correspond to different loss functions.&lt;/p&gt;


&lt;p&gt;Pre-training produces what is called a “base model”, which is a
language model that is not particularly well suited to being used as a
chatbot, but has taken in a large body of text (typically a decent chunk
of the internet). Here, the loss function feeds it many short chunks of
text, and measures how often it correctly predicts the following text.
In this way, the base model ends up “learning” a lot of the knowledge
encoded in its text, because it is able to represent it well enough to
predict what comes next.&lt;label class="margin-toggle sidenote-number" for="fn19"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn19" type="checkbox"/&gt;&lt;span class="sidenote"&gt;It could of course do this by memorisation, and
sometimes it will do this, but generally you don’t &lt;em&gt;want&lt;/em&gt; it to
do that. You want it to encode the knowledge in a way that generalises
to unfamiliar text, representing it as efficiently as possible. One of
the things that helps you do this is making sure that the text you’re
training on is much much larger than the model, which is part of why
training is so data hungry. It will sometimes memorise anyway, but this
is a bug not a feature.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;Once you have a base model, you create a chat model in the
post-training phase. This involves creating a loss function that
represents “how good it is at being a chatbot”. You do this by giving it
a large number of starting texts to a completion engine using the model
(some of which might be as simple as “Human:”, letting it generate the
whole conversation, and some of which might have quite specific
prompts), running the completion on it, and then scoring the result in
some way. The average score over all those prompts is your loss
function, and post-training is designed to make the model behave well
with those prompts.&lt;/p&gt;


&lt;p&gt;Some of this loss function is as simple as things like “Does it hand
back to the human in a reasonable time?”. Others might evaluate whether
it gets correct answers to particular questions (e.g. if you ask it
arithmetic questions, does it give you the right answer?). Others yet
might be more nebulous things, like “Is it helpful, harmless, and
honest?”. That’s where RLHF, reinforcement learning from human feedback,
and &lt;em&gt;preference models&lt;/em&gt; come in.&lt;/p&gt;


&lt;h3 id="using-preference-models-in-training"&gt;Using preference models in
training&lt;/h3&gt;


&lt;p&gt;One of the basic features of training a large language models is the
use of human feedback, comparing two or more different completions and
rating which one is better, or marking a particular answer as harmful,
wrong, etc. You want to be able to incorporate this into your model
training. However, this would be intolerably slow. Gradient descent
makes many small changes, and asking a human for feedback at each point
in that process would take literally forever.&lt;/p&gt;


&lt;p&gt;Instead what we do is we training up another type of model, called a
&lt;em&gt;preference model&lt;/em&gt;. A preference model takes some piece of text
and gives it a score, which we expect to correspond to a score that a
human would give it This gives us a program that we can use as a good
proxy for human feedback: We expect it to score texts roughly as a human
would.&lt;label class="margin-toggle sidenote-number" for="fn20"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn20" type="checkbox"/&gt;&lt;span class="sidenote"&gt;You may of course be noticing that there’s a key
problem with this: A preference model can only learn the texts as well
as its structure allows it to. If humans are scoring things well or
badly based on whether they’re correct in some way an LLM can’t actually
represent, the same will be true for the preference model.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;A preference model is constructed in roughly the same way as a
language model, with a set of weights that you can train up to minimise
some loss function:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;We put together a large number of examples along with the score they
“should” have, or pairs where we say which one is better (e.g. a choice
when asked which of two LLM answers you prefer). These scores are set up
so that a lower score is better, as with a normal loss function.&lt;/li&gt;
&lt;li&gt;We define a loss function which is lower the better the preference
model predicts those scores.&lt;/li&gt;
&lt;li&gt;We train a preference model to minimise that loss.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In post-training, we then perform our reinforcement learning to
minimise a loss function that comes from the preference model: We run
the completions on our training set, score them according to the
preference model’s rating of them, and calculate the loss function as
some combination (e.g. an average) of those scores.&lt;/p&gt;


&lt;p&gt;When the preference model is calculated by predicting humans raters’
responses, this is what’s called RLHF: Reinforcement Learning from Human
Feedback.&lt;/p&gt;


&lt;p&gt;A nice thing about this process is that it allows us to “bank” our
ratings. We don’t have to keep asking humans the same questions over and
over again, or running expensive tests, we can build up a large body of
scored text and use that for training the preference model. It also
generalises better, because the preference model learns quite general
forms of the sorts of features that are preferred.&lt;/p&gt;


&lt;p&gt;Another approach you can take is RLAIF, reinforcement learning from
AI feedback. This is exactly the same sort of thing, but your raters are
now previously trained LLMs who have been given a constitution that says
how to rate responses, and these are used to produce your training data
for the preference model. This is Anthropic’s &lt;a href="https://arxiv.org/abs/2212.08073"&gt;constitutional AI&lt;/a&gt; approach
and despite all the ways it causes your eyebrows to raise when you first
hear it, it reportedly works very well.&lt;/p&gt;


&lt;h3 id="tbd"&gt;TBD&lt;/h3&gt;


&lt;p&gt;There’s probably more to say here and I’ll update this in response to
human feedback.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2025-02-08-09:26.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2025-02-18-10:11.html</id>
    <title>You only need shallow justifications</title>
    <updated>2025-03-05T10:29:24+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;You only need shallow justifications&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2025-02-18&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;This started off on the newsletter and then wandered in a direction I
didn’t intend and as a result stalled at turning into something
adequately newsletter shaped, so I’ve moved it over here to finish it
off in whatever form it wants to be in.&lt;/p&gt;


&lt;hr/&gt;


&lt;p&gt;I have a concept of “the legitimacy of conflict” that I’ve been
trying to articulate for ages and failing to really get a good handle
on. I’ve recently had a hit tweet that I think gives me part of that
handle.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://x.com/DRMacIver/status/1887844134196515016"&gt;The
tweet goes as follows&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;One mistake people make in salary negotiations is that they try to
make a practical or moral argument for the higher value. This can be
useful, but I’ve had surprisingly good luck recently with words to the
tune of “I like money. How about you offer more money than that?”&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;The point is that you don’t need to justify wanting more money.
Obviously you want more money. All you need to communicate is that the
amount of money that has currently been offered isn’t enough for you to
say yes on the spot, and more would be welcomed.&lt;/p&gt;


&lt;p&gt;Sometimes they will just say yes and offer you more money. Generally
speaking, hiring is expensive and finding a good candidate is hard, and
by the time you’ve got to this point, there’s a pretty wide range of
amounts they’re willing to pay, and they haven’t offered you the highest
amount they’d be willing off the bat.&lt;/p&gt;


&lt;p&gt;Sometimes they will flat out say no. Sometimes they’ll even mean it.
If you want more money at this point you’ll need to either walk away or
&lt;a href="https://books.rixx.de/chris-voss/never-split-the-difference/"&gt;break
out a more serious negotiating toolkit&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Most of the time this will result in a further discussion about the
value you bring, or how to justify the decision to someone else, or
something of that ilk. Essentially never&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;OK, essentially never under the assumption that you’re
operating in a relatively high strength negotiating position. There’s a
decent chance of this going badly in e.g. minimum wage jobs that are
oversupplied with candidates and run by petty tyrants.&lt;/span&gt;
will they ask you why you want more money, or descend into some Oliver
Twist style rant about how dare you ask for more you miserable little
urchin.&lt;/p&gt;


&lt;p&gt;Generally speaking though, in a remotely healthy environment the
discussion will never involve asking why you want more money, it will
always be about why you are worth more money to the company. Because,
from a business point of view, of course you want more money. Money is
good. Sure maybe you need it to pay the rent, or to care for your
seventeen children, or one of any other reasons you might have, but this
does not actually affect any of the basic business reality, which is
that it’s perfectly reasonable for you to want more money and it’s also
perfectly reasonable for them to not to spend more money.&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Now the reality is that the person you’re talking to
does not have incentives perfectly aligned with the business, and as a
result telling them a sob story about how you’ve got all these cute
orphans you’re looking after and you need the extra money to buy them
expensive medicine for their rare genetic diseases please sir won’t you
think of the orphans, might well sway them to try to work a bit harder
to offer you more money. But now, functionally, you’ve just got a repeat
of the general situation with you and them working together to negotiate
with the broader business which is, ultimately, not in the business of
curing rare genetic diseases in orphans for free, but instead makes
widgets.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;A negotiation like this is a great example of what I mean when I talk
about a conflict, and why conflict is legitimate.&lt;/p&gt;


&lt;p&gt;Specifically, I’m using “conflict” in the economics sense of Thomas
Schelling, as articulated in his great book “The Strategy of Conflict”:
A conflict is a positive-sum game with imperfect alignment.&lt;/p&gt;


&lt;p&gt;That is, you have a situation with two (or more) parties in
which:&lt;/p&gt;


&lt;p&gt;There are outcomes which are better for all parties than not
participating in the situation.&lt;/p&gt;


&lt;p&gt;Among those outcomes, there is disagreement as to which is the best
outcome.&lt;/p&gt;


&lt;p&gt;Whenever I use the word “conflict” in this article, I mean it in this
sense of conflicting desires in a situation where it is to your mutual
benefit to figure out an outcome compatible with them both.&lt;/p&gt;


&lt;p&gt;A salary negotiation is precisely this sort of scenario:
Participation is getting hired (which requires both your agreement), and
getting hired is at this point in the process presumed to be better for
both of you than not getting hired (you want the job, they want someone
to do the job and think you would be a good such someone), but the best
outcome for you is that they pay you a lot, and the best outcome for
them is that they pay you a little.&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;There are all sorts of complexities to this about
retention, ethics, etc. Try to ignore those. At any rate, even to the
degree that those matter, they matter mostly for large changes. A 1%
difference either way probably doesn’t affect either of those that much,
but a 1% pay raise is clearly slightly better for you, and a 1% pay
decrease is clearly slightly better for them.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;One of the difficulties I’ve had in articulating the legitimacy of
conflict is that people hear “conflict” and they think “fight”, where
Schelling and I mean it more in the sense of “things that are in tension
with each other that you need to resolve to make the situation work
well”.&lt;/p&gt;


&lt;p&gt;The other difficulty is that part of the problem I’m pointing at is
that I don’t think people emotionally distinguish the two and do, in
fact, experience something like this as if it were a fight.&lt;/p&gt;


&lt;h3 id="no-correct-answers"&gt;No correct answers&lt;/h3&gt;


&lt;p&gt;I think one reason people experience the salary negotiation as a
fight is that it feels too easy to frame it in moral terms. There’s an
amount of money you “deserve” and if you ask for more than that you’re
greedy and if you get less than that the company is greedy. Either way
someone is bad. This viewpoint is, I must emphasise, wrong, and you’ll
make less miserable and earn less money than you could if you adopt it,
but it’s a very easy trap to fall into. But I think it’s hard to see
that starting from this scenario.&lt;/p&gt;


&lt;p&gt;Here’s another example, I think originally from Schelling:&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Though his originally example was probably a bit
different. I think it involved the movies?&lt;/span&gt; Suppose you and I want to hang out,
and settle on going out for a meal. We rule out anything literally
unacceptable to one of us (e.g. as much as I’d like to I can’t eat
pizza, you need options that aren’t super spicy) and settle on a number
of options that we’d be fine with. My favourite is the Thai option,
yours is the Mexican option. Either of us would be fine with either
option, but each of us has a clear preference for one over the other.&lt;label class="margin-toggle sidenote-number" for="fn5"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn5" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Why not find a third option that we both like? Well,
what are you, some sort of fancy big city type with lots of restaurant
options? In my small town, you’re lucky if there’s one restaurant you
like! Two is just luxury.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;More seriously, this is always a tempting rebuttal but I think
basically doesn’t work. There just sometimes aren’t such options. Some
people really do have incompatible food preferences where you’re never
going to find a meal that delights them both, and “delights one of them
and is more or less fine for the other” is probably the best outcome you
can achieve.&lt;/p&gt;


&lt;p&gt;This is particularly true once you add hard constraints. Try feeding
a vegan at the same time as someone with soy and nut allergies and see
how well that goes for you.&lt;/p&gt;


&lt;p&gt;This is a clear conflict: We both want to go out for a meal. We don’t
agree which restaurant is best, but we’d prefer either to not going out
for a meal.&lt;/p&gt;


&lt;p&gt;It would also, I feel, be utterly idiotic for this conflict to turn
into a fight. We’re friends. It’s not just that we can resolve this
amicably, it’s that it getting unamicable in the first place at all
would be a little weird. We can flip a coin, or take turns deciding, or
you can decide where we eat and I decide what bar we go to after, or
adopt one of a variety of other resolution mechanisms, and it will be
fine.&lt;/p&gt;


&lt;p&gt;One thing we shouldn’t do is decide on the basis of who wants their
outcome more. Or, we might do that sometimes - if there’s a cool new
Mexican place in town that you’ve been really excited to try out, and I
want to go to the Thai place I’m familiar with because it’s consistently
pretty good, it seems reasonable that we should pick the Mexican place.
If, however, every time we go out you’re like this, and I never really
acquire your taste for novelty despite our best efforts, I think I’d
quite reasonably feel a little hard done by if my preferences never got
a hearing.&lt;label class="margin-toggle sidenote-number" for="fn6"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn6" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This may seem like a suspiciously specific example, but
it’s honestly entirely fictional.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;Because this is a negotiation as part of an ongoing relationship,
it’s clear that there doesn’t have to be a single right answer to the
conflict in desires, you resolve so that mostly everybody is happy.&lt;label class="margin-toggle sidenote-number" for="fn7"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn7" type="checkbox"/&gt;&lt;span class="sidenote"&gt; I originally wrote “so that everything averages out
over time” but actually I think this is not correct. It may well just be
the case that the result is consistently “unfair” but still better than
not participating. Many different dynamics can lead to this, and it’s
not intrinsically a problem.&lt;/span&gt;&lt;/p&gt;


&lt;h3 id="resource-constraints"&gt;Resource Constraints&lt;/h3&gt;


&lt;p&gt;Another example of a conflict I often use is: Do you take the last &lt;a href="https://en.wikipedia.org/wiki/%C3%89clair"&gt;Eclair&lt;/a&gt; in the shop?
Someone else might want it after all!&lt;label class="margin-toggle sidenote-number" for="fn8"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn8" type="checkbox"/&gt;&lt;span class="sidenote"&gt;This is a slightly strange example of a positive sum
game because although participating is never worse than not
participating, unless there’s an Eclair there it’s not really better
either. Unless you needed to go to the shop anyway.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;I think, clearly, the answer is yes.&lt;label class="margin-toggle sidenote-number" for="fn9"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn9" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Although when I’m buying a lot of something, I will
usually make sure to leave at least one on the shelves. e.g. there’s a
particular frozen chicken curry that the child is currently obsessed
with and that we’re perfectly happy to be a default meal for her, so I
bought a bunch of them recently, and made sure to leave one in the
freezer. It’ll get restocked soon, but in the immediate future if
there’s someone looking for a mediocre Morrisons own brand butter
chicken, they won’t go lacking.&lt;/span&gt;&lt;/p&gt;


&lt;h3 id="abandonment-note"&gt;Abandonment note&lt;/h3&gt;


&lt;p&gt;At this point I stopped writing and I’ve lost enough context that I
no longer intend to resume at this point. I did say that it’s hard for
me to write about this subject!&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2025-02-18-10:11.html" rel="alternate"/>
  </entry>
  <entry>
    <id>https://notebook.drmaciver.com/posts/2025-03-05-10:29.html</id>
    <title>World counting as a tool for understanding probability</title>
    <updated>2025-03-05T11:53:31+00:00</updated>
    <content type="html">

&lt;p class="subtitle"&gt;World counting as a tool for understanding probability&lt;/p&gt;


&lt;dl class="metadata"&gt;
&lt;dt&gt;Published&lt;/dt&gt;
&lt;dd class="post-date"&gt;2025-03-05&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;There are a number of basic conditional probability problems that
seem counter-intuitive but become intuitive with an extremely basic
technique.&lt;label class="margin-toggle sidenote-number" for="fn1"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn1" type="checkbox"/&gt;&lt;span class="sidenote"&gt;So basic that it’s almost embarrassing to describe it as
a technique to be honest, but then I see people getting confused on
problems trivially solvable by it and think it probably warrants that
label after all.&lt;/span&gt; I thought it would be worth
explaining this technique, as I think it’s both a good tool to have in
your toolkit explicitly, and is potentially a good route in for teaching
people to reason about probability.&lt;/p&gt;


&lt;p&gt;The technique is “world counting”. You enumerate all the possible
versions of the world, cross out any ones that have been ruled out by
evidence, and then work out what fraction of the worlds remaining have
the property of interest.&lt;/p&gt;


&lt;p&gt;For example, say I roll two dice, and tell you only that I rolled a
sum of 8 or more. What is the probability that at least one of those
rolls was a 6?&lt;/p&gt;


&lt;p&gt;First, we enumerate all the possible rolls: 1/1, 1/2, …, 2/1, …,
6/6.&lt;/p&gt;


&lt;p&gt;Now, we cut out all of the ones where the sum is less than 8, and get
the following combinations remaining: 2/6, 3/5, 3/6, 4/4, 4/5, 4/6, 5/3,
5/4, 5/5, 5/6, 6/2, 6/3, 6/4, 6/5, 6/6&lt;/p&gt;


&lt;p&gt;That gives us 15 worlds, of which 9 have a 6 in them, so the
probability of a 6 is &lt;span class="math inline"&gt;\(\frac{9}{15} =
0.6\)&lt;/span&gt;.&lt;/p&gt;


&lt;p&gt;This works well with the dice example, but we run into a wrinkle with
a slightly more complicated one.&lt;/p&gt;


&lt;p&gt;Consider the following problem: I flip a coin. If it shows heads, I
flip it again. If it shows tails, I don’t.&lt;/p&gt;


&lt;p&gt;This gives us three worlds: HH, HT, T. Two where I got heads the
first time, one where I got tails the second time.&lt;/p&gt;


&lt;p&gt;Now, what is the probability of getting heads on the first toss? It’s
half, obviously, but the world enumeration approach as I’ve described it
so far gives &lt;span class="math inline"&gt;\(\frac{2}{3}\)&lt;/span&gt; because
there are twice as many worlds with heads as tails. This is clearly
wrong.&lt;/p&gt;


&lt;p&gt;One way to fix this is to imagine that we flip the second coin
regardless but that flip is only “visible” if we got heads on the first
flip. This gives us the worlds HH, HT, TH, TT, where to the observer TH
and TT look identical, and we recover the right probability (&lt;span class="math inline"&gt;\(\frac{1}{2}\)&lt;/span&gt;). This feels a little
convoluted though.&lt;/p&gt;


&lt;p&gt;The real problem here is that the world counting method I described
only works for situations where every world is equally likely, and in
this case that’s not true. The T world is twice as likely as either the
HT or the HH worlds.&lt;/p&gt;


&lt;p&gt;So, let’s generalise the technique slightly: A &lt;em&gt;weighted world
enumeration&lt;/em&gt; is a non-empty list of possible worlds together with
some non-zero weight associated with each of them. In order to calculate
the probability of something, you add up the weight of the worlds in
which it’s true, and divide by the total weight of the worlds.&lt;/p&gt;


&lt;p&gt;Now, the question is… how do you get weighted world enumerations?&lt;/p&gt;


&lt;p&gt;You build them as follows:&lt;/p&gt;


&lt;ol type="1"&gt;
&lt;li&gt;You start from a basic enumeration which is just a single world in
which anything could happen, and some arbitrary weight (it doesn’t
matter what. Conventionally it would be 1, but you can pick this for
convenience)&lt;/li&gt;
&lt;li&gt;You can at any point split a world into one or more subworlds which
are mutually incompatible. e.g. if I flip a coin, you could split the
world into the subworlds where it comes up heads and the subworlds that
it comes up tails. The weights you assign to those subworlds can be
whatever you like, as long as they add up to the weight of the original
world. If you think of the subworlds as equally likely you should split
the weight between them evenly.&lt;label class="margin-toggle sidenote-number" for="fn2"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn2" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Note that you’re allowed to throw away possibilities
when you do this split. e.g. if you believe that something is a
necessary consequence of one of your worlds, you can replace it with
some more specialised condition without changing the weights.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;To get a conditional weighted world enumeration (i.e. the world
enumeration you want after observing something that rules out some of
the worlds), you just remove everything from the list that has been
ruled out.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So, with our two coins example, we start with a world weighted at
(say) 4, we first split it into (H, 2), (T, 2), and then again into (HH,
1), (HT, 1), (T, 2). This gets us the intuitive result that the T world
is twice as big as each of the HH and HT worlds (but has the same weight
as them combined).&lt;/p&gt;


&lt;p&gt;Here’s the problem where I first realised quite how useful this
technique is:&lt;label class="margin-toggle sidenote-number" for="fn3"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn3" type="checkbox"/&gt;&lt;span class="sidenote"&gt;Paraphrased from &lt;a href="https://x.com/julianboolean_/status/1836867126360944873"&gt;this
tweet&lt;/a&gt;. In the original form it asks whether the probability that
there’s a ball under the cup has gone up or down, and this doesn’t
actually require you to calculate the probability, because of an
interesting general principle: If &lt;span class="math inline"&gt;\(A,
B\)&lt;/span&gt; are disjoint events with non-zero probabilities of occurring,
then necessarily &lt;span class="math inline"&gt;\(P(A | \neg B) &amp;gt;
P(A)\)&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;There are 10 opaque cups face down on a table. I flipped a fair coin,
if it was heads I picked 1 cup uniformly at random and placed a ball
under it.&lt;/p&gt;


&lt;p&gt;You flip the first 9 cups. No ball.&lt;/p&gt;


&lt;p&gt;What is the probability that there’s a ball under cup 10?&lt;/p&gt;


&lt;p&gt;We can build up our world enumeration as follows:&lt;/p&gt;


&lt;p&gt;First, for convenience, pick the initial weight to be 20.&lt;/p&gt;


&lt;p&gt;Now, split this into two worlds based on the flip of a coin. Our
world enumeration is now (H, 10), (T, 10). Half the world weight goes to
each coin flip.&lt;/p&gt;


&lt;p&gt;If we picked heads, we now pick a cup at random. This splits the H
world into the 10 possible subworlds, one for each cup. So now we have
(T, 10), (H1, 1), (H2, 1), …, (H10, 1).&lt;/p&gt;


&lt;p&gt;Now, we want our conditional world enumeration, which has determined
that there is no ball in the first 9 cups. This removes all the worlds
in which we placed a ball there, so now our world enumeration is (T,
10), (H10, 1).&lt;/p&gt;


&lt;p&gt;This means that the probability that the ball is in the 10th cup is
&lt;span class="math inline"&gt;\(\frac{1}{10 + 1} = \frac{1}{11}\)&lt;/span&gt;,
because the total weight of the worlds remaining is &lt;span class="math inline"&gt;\(11\)&lt;/span&gt; and of that weight, &lt;span class="math inline"&gt;\(1\)&lt;/span&gt; of it has the ball there.&lt;label class="margin-toggle sidenote-number" for="fn4"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn4" type="checkbox"/&gt;&lt;span class="sidenote"&gt;So to answer the original question, it goes up, because
the original probability before revealing those balls is &lt;span class="math inline"&gt;\(\frac{1}{20}\)&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;I think this approach is also useful for reasoning about the dreaded
&lt;a href="https://en.wikipedia.org/wiki/Monty_Hall_problem"&gt;Monty Hall
problem&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Suppose you’re on a game show, and you’re given the choice of three
doors: Behind one door is a car; behind the others, goats. You pick a
door, say No. 1, and the host, who knows what’s behind the doors, opens
another door, say No. 3, which has a goat. He then says to you, “Do you
want to pick door No. 2?” Is it to your advantage to switch your
choice?&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;We start with our initial world, which we’ll give weight 1 out of
convention, and split it three ways based on which door has a car behind
it: 1, 2, 3. We believe these to be equally likely&lt;label class="margin-toggle sidenote-number" for="fn5"&gt;&lt;/label&gt;&lt;input class="margin-toggle" id="fn5" type="checkbox"/&gt;&lt;span class="sidenote"&gt;If we didn’t believe that we could in our head shuffle
the doors and relabel them to make this the case.&lt;/span&gt;, so
give them each weight &lt;span class="math inline"&gt;\(\frac{1}{3}\)&lt;/span&gt;.&lt;/p&gt;


&lt;p&gt;Monty then picks a door, 2 or 3. This gives us 6 theoretically
possible worlds. 12, 13, 22, 23, 32, 33.&lt;/p&gt;


&lt;p&gt;Now, we know that Monty knows which door the car is behind, and thus
presumably is deliberately picking a door which doesn’t have a car. This
means that the worlds 22 and 33 are actually impossible, because Monte
will never pick that door. Thus our actual list is 12, 13, 23, 32.&lt;/p&gt;


&lt;p&gt;The worlds in which it’s an advantage to us to switch are 23 and 32,
so to calculate how likely it is for switching to be good we need to
know their total weight. We don’t know the weights of 12, 13, but we do
know that the total weight stayed unchanged (as we’ve not removed any
possible worlds, only impossible ones that we’d have had to assign
weight zero to), so the total weight is &lt;span class="math inline"&gt;\(1\)&lt;/span&gt; and the probability that switching is
good for us is the sum of the weights of worlds 23 and 32, which is
&lt;span class="math inline"&gt;\(\frac{2}{3}\)&lt;/span&gt;. So switching is good
most of the time.&lt;/p&gt;


&lt;p&gt;It’s interesting to compare this to the version in which Monty
doesn’t know which door has the car behind it and picks randomly (with
you just losing immediately if he picks a car). We now have all six of
our possible worlds 12, 13, 22, 23, 32, 33, with each of these having an
equal weight of &lt;span class="math inline"&gt;\(\frac{1}{6}\)&lt;/span&gt;. Now,
we’ve observed a goat, which cuts out the worlds 22 and 33, so now we’ve
got worlds 12, 13, 23, 32. But this time all of these have equal weight,
so switching is to our advantage with probabilityh &lt;span class="math inline"&gt;\(\frac{1}{2}\)&lt;/span&gt;, and there is no benefit (or
disadvantage) to switching.&lt;/p&gt;


&lt;p&gt;You can extend this technique to general Bayesian reasoning, which is
essentially a modification where rather than cutting out worlds that are
impossible you reweight them based on how likely they are to show the
relevant data, but that’s a topic for another time.&lt;/p&gt;

</content>
    <link href="https://notebook.drmaciver.com/posts/2025-03-05-10:29.html" rel="alternate"/>
  </entry>
</feed>
